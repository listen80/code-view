{"version":3,"file":"code.min.js","sources":["../src/code2.0.js","../src/code1.0.js"],"sourcesContent":["console.log('2.0')","const space = \"space\"\r\nconst line = \"line\"\r\nconst dark = \"dark\"\r\nconst italic = \" i\"\r\nconst white = \"white\"\r\nconst purple = \"purple\"\r\nconst gold = \"gold\"\r\nconst red = \"red\"\r\nconst green = \"green\"\r\nconst yellow = \"yellow\"\r\nconst ryan = \"ryan\"\r\n\r\nlet source = \"\"\r\nlet token, style, cache, match, i, analysis\r\n\r\nfunction inArray (value, arr) {\r\n  for (let x = 0, len = arr.length; x < len; x++) {\r\n    if (arr[x] === value) {\r\n      return 1\r\n    }\r\n  }\r\n}\r\n\r\nfunction push () {\r\n  analysis.push([cache, style])\r\n}\r\n\r\nfunction isSpace () {\r\n  return token && /[\\v\\t ]/.test(token)\r\n}\r\n\r\nfunction isNewLine () {\r\n  return token === \"\\n\" || token === \"\\r\"\r\n}\r\n\r\nfunction isHex () {\r\n  return token && /[0-9A-Fa-f]/.test(token)\r\n}\r\n\r\nfunction isNumber () {\r\n  return token && /[0-9]/.test(token)\r\n}\r\n\r\nfunction isPunctuation () {\r\n  return \"~`!@#$%^&*()-_+=[]{}\\\\;:'\\\"|,.<>/?\".indexOf(token) !== -1\r\n}\r\n\r\nfunction isLetter () {\r\n  return token && /[a-zA-Z_]/.test(token)\r\n}\r\n\r\nfunction isHtmlLetter () {\r\n  return isLetter() || token === \"-\"\r\n}\r\n\r\nfunction isLogistic () {\r\n  return \"$!+-=*%&|^<>\".indexOf(token) !== -1\r\n}\r\n\r\nconst keywords =\r\n  \"break,case,catch,const,continue,debugger,default,delete,do,else,extends,finally,for,if,import,in,instanceof,let,new,return,super,switch,throw,try,typeof,var,void,while,with\".split(\r\n    \",\",\r\n  )\r\n\r\nfunction isKeyword () {\r\n  return inArray(cache, keywords)\r\n}\r\n\r\nfunction isConstant () {\r\n  return inArray(cache, [\"null\", \"true\", \"false\", \"undefined\"])\r\n}\r\n\r\nconst variable = [\"var\", \"let\", \"const\"]\r\n\r\nfunction isVariable () {\r\n  return inArray(cache, variable)\r\n}\r\n\r\nconst parameter = [\"self\", \"this\", \"argument\"]\r\n\r\nfunction isParameter () {\r\n  return inArray(cache, parameter)\r\n}\r\n\r\nconst normal = [\r\n  \"prototype\",\r\n  \"module\",\r\n  \"window\",\r\n  \"document\",\r\n  \"history\",\r\n  \"location\",\r\n  \"screen\",\r\n  \"console\",\r\n  \"Object\",\r\n  \"Array\",\r\n  \"Number\",\r\n  \"Boolean\",\r\n  \"String\",\r\n  \"RegExp\",\r\n  \"Math\",\r\n]\r\n\r\nfunction isNormal () {\r\n  return inArray(cache, normal)\r\n}\r\n\r\nfunction getHex () {\r\n  style = purple\r\n  cache = token\r\n  while (true) {\r\n    token = source[++i]\r\n    if (isHex()) {\r\n      cache += token\r\n    } else {\r\n      break\r\n    }\r\n  }\r\n}\r\n\r\nfunction getNumber () {\r\n  cache = token\r\n  while (true) {\r\n    token = source[++i]\r\n    if (isNumber()) {\r\n      cache += token\r\n    } else if (token === \".\") {\r\n      cache += token\r\n      while (true) {\r\n        token = source[++i]\r\n        if (isNumber()) {\r\n          cache += token\r\n        } else {\r\n          break\r\n        }\r\n      }\r\n      break\r\n    } else {\r\n      break\r\n    }\r\n  }\r\n}\r\n\r\nfunction getWord () {\r\n  cache = token\r\n  while (true) {\r\n    token = source[++i]\r\n    if (isLetter() || isNumber()) {\r\n      cache += token\r\n    } else {\r\n      break\r\n    }\r\n  }\r\n}\r\n\r\nfunction getHtmlWord () {\r\n  cache = token\r\n  while (true) {\r\n    token = source[++i]\r\n    if (isHtmlLetter() || isNumber()) {\r\n      cache += token\r\n    } else {\r\n      break\r\n    }\r\n  }\r\n}\r\n\r\nconst tagnames =\r\n  \"a,abbr,address,area,article,aside,audio,b,base,bdi,bdo,big,blockquote,body,br,button,canvas,caption,center,cite,code,datalist,dd,del,details,dfn,dialog,dir,div,dl,dt,em,embed,fieldset,figcaption,figure,font,footer,form,frame,frameset,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,i,iframe,img,input,ins,kbd,keygen,label,legend,li,link,main,map,mark,nav,object,ol,optgroup,option,p,pre,progress,q,s,samp,script,section,select,small,span,strong,sub,summary,sup,table,tbody,td,textarea,tfoot,th,thead,tr,u,ul,video\".split(\r\n    \",\",\r\n  )\r\n\r\nfunction isTargetName () {\r\n  return inArray(cache, tagnames)\r\n}\r\n\r\nconst cssKeys =\r\n  \"align-content,align-items,align-self,alignment-baseline,all,animation,animation-delay,animation-direction,animation-duration,animation-fill-mode,animation-iteration-count,animation-name,animation-play-state,animation-timing-function,backface-visibility,background,background-attachment,background-blend-mode,background-clip,background-color,background-image,background-origin,background-position,background-position-x,background-position-y,background-repeat,background-repeat-x,background-repeat-y,background-size,baseline-shift,border,border-bottom,border-bottom-color,border-bottom-left-radius,border-bottom-right-radius,border-bottom-style,border-bottom-width,border-collapse,border-color,border-image,border-image-outset,border-image-repeat,border-image-slice,border-image-source,border-image-width,border-left,border-left-color,border-left-style,border-left-width,border-radius,border-right,border-right-color,border-right-style,border-right-width,border-spacing,border-style,border-top,border-top-color,border-top-left-radius,border-top-right-radius,border-top-style,border-top-width,border-width,bottom,box-shadow,box-sizing,break-after,break-before,break-inside,buffered-rendering,caption-side,clear,clip,clip-path,clip-rule,color,color-interpolation,color-interpolation-filters,color-rendering,column-count,column-fill,column-gap,column-rule,column-rule-color,column-rule-style,column-rule-width,column-span,column-width,columns,contain,content,counter-increment,counter-reset,cursor,cx,cy,d,direction,display,dominant-baseline,empty-cells,fill,fill-opacity,fill-rule,filter,flex,flex-basis,flex-direction,flex-flow,flex-grow,flex-shrink,flex-wrap,float,flood-color,flood-opacity,font,font-family,font-feature-settings,font-kerning,font-size,font-stretch,font-style,font-variant,font-variant-caps,font-variant-ligatures,font-variant-numeric,font-weight,height,hyphens,image-rendering,isolation,justify-content,left,letter-spacing,lighting-color,line-height,list-style,list-style-image,list-style-position,list-style-type,margin,margin-bottom,margin-left,margin-right,margin-top,marker,marker-end,marker-mid,marker-start,mask,mask-type,max-height,max-width,max-zoom,min-height,min-width,min-zoom,mix-blend-mode,motion,object-fit,object-position,offset,offset-distance,offset-path,offset-rotation,opacity,order,orientation,orphans,outline,outline-color,outline-offset,outline-style,outline-width,overflow,overflow-wrap,overflow-x,overflow-y,padding,padding-bottom,padding-left,padding-right,padding-top,page,page-break-after,page-break-before,page-break-inside,paint-order,perspective,perspective-origin,pointer-events,position,quotes,r,resize,right,rx,ry,shape-image-threshold,shape-margin,shape-outside,shape-rendering,size,speak,src,stop-color,stop-opacity,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,tab-size,table-layout,text-align,text-align-last,text-anchor,text-combine-upright,text-decoration,text-indent,text-orientation,text-overflow,text-rendering,text-shadow,text-size-adjust,text-transform,top,touch-action,transform,transform-origin,transform-style,transition,transition-delay,transition-duration,transition-property,transition-timing-function,unicode-bidi,unicode-range,user-select,user-zoom,vector-effect,vertical-align,visibility,webkit-app-region,webkit-appearance,webkit-background-clip,webkit-background-origin,webkit-border-after,webkit-border-after-color,webkit-border-after-style,webkit-border-after-width,webkit-border-before,webkit-border-before-color,webkit-border-before-style,webkit-border-before-width,webkit-border-end,webkit-border-end-color,webkit-border-end-style,webkit-border-end-width,webkit-border-horizontal-spacing,webkit-border-image,webkit-border-start,webkit-border-start-color,webkit-border-start-style,webkit-border-start-width,webkit-border-vertical-spacing,webkit-box-align,webkit-box-decoration-break,webkit-box-direction,webkit-box-flex,webkit-box-flex-group,webkit-box-lines,webkit-box-ordinal-group,webkit-box-orient,webkit-box-pack,webkit-box-reflect,webkit-column-break-after,webkit-column-break-before,webkit-column-break-inside,webkit-font-size-delta,webkit-font-smoothing,webkit-highlight,webkit-hyphenate-character,webkit-line-break,webkit-line-clamp,webkit-locale,webkit-logical-height,webkit-logical-width,webkit-margin-after,webkit-margin-after-collapse,webkit-margin-before,webkit-margin-before-collapse,webkit-margin-bottom-collapse,webkit-margin-collapse,webkit-margin-end,webkit-margin-start,webkit-margin-top-collapse,webkit-mask,webkit-mask-box-image,webkit-mask-box-image-outset,webkit-mask-box-image-repeat,webkit-mask-box-image-slice,webkit-mask-box-image-source,webkit-mask-box-image-width,webkit-mask-clip,webkit-mask-composite,webkit-mask-image,webkit-mask-origin,webkit-mask-position,webkit-mask-position-x,webkit-mask-position-y,webkit-mask-repeat,webkit-mask-repeat-x,webkit-mask-repeat-y,webkit-mask-size,webkit-max-logical-height,webkit-max-logical-width,webkit-min-logical-height,webkit-min-logical-width,webkit-padding-after,webkit-padding-before,webkit-padding-end,webkit-padding-start,webkit-perspective-origin-x,webkit-perspective-origin-y,webkit-print-color-adjust,webkit-rtl-ordering,webkit-ruby-position,webkit-tap-highlight-color,webkit-text-combine,webkit-text-decorations-in-effect,webkit-text-emphasis,webkit-text-emphasis-color,webkit-text-emphasis-position,webkit-text-emphasis-style,webkit-text-fill-color,webkit-text-orientation,webkit-text-security,webkit-text-stroke,webkit-text-stroke-color,webkit-text-stroke-width,webkit-transform-origin-x,webkit-transform-origin-y,webkit-transform-origin-z,webkit-user-drag,webkit-user-modify,webkit-writing-mode,white-space,widows,width,will-change,word-break,word-spacing,word-wrap,writing-mode,x,y,z-index,zoom\".split(\r\n    \",\",\r\n  )\r\n\r\nfunction isCssKey () {\r\n  return inArray(cache.replace(/^-(webkit|moz|ms|o)-/, \"\"), cssKeys)\r\n}\r\n\r\nconst cssValues =\r\n  \"red,blue,yellow,green,lime,content-box,border-box,translateX,translateY,translateZ,url,rgba,rgb,whitespace,wait,w-resize,visible,vertical-text,vertical-ideographic,uppercase,upper-roman,upper-alpha,underline,transparent,top,thin,thick,text,text-top,text-bottom,tb-rl,table-header-group,table-footer-group,sw-resize,super,strict,static,square,solid,small-caps,separate,se-resize,scroll,s-resize,rtl,row-resize,ridge,right,repeat,repeat-y,repeat-x,relative,progress,pointer,overline,outside,outset,oblique,nowrap,not-allowed,normal,none,nw-resize,no-repeat,no-drop,newspaper,ne-resize,n-resize,move,middle,medium,ltr,lr-tb,lowercase,lower-roman,lower-alpha,loose,list-item,line,line-through,line-edge,lighter,left,keep-all,justify,italic,inter-word,inter-ideograph,inside,inset,inline,inline-block,inherit,inactive,ideograph-space,ideograph-parenthesis,ideogwhitespace,wait,w-resize,visible,vertical-text,vertical-ideographic,uppercase,upper-roman,upper-alpha,underline,transparent,top,thin,thick,text,text-top,text-bottom,tb-rl,table-header-group,table-footer-group,sw-resize,super,strict,static,square,solid,small-caps,separate,se-resize,scroll,s-resize,rtl,row-resize,ridge,right,repeat,repeat-y,repeat-x,relative,progress,pointer,overline,outside,outset,oblique,nowrap,not-allowed,normal,none,nw-resize,no-repeat,no-drop,newspaper,ne-resize,n-resize,move,middle,medium,ltr,lr-tb,lowercase,lower-roman,lower-alpha,loose,list-item,line,line-through,line-edge,lighter,left,keep-all,justify,italic,inter-word,inter-ideograph,inside,inset,inline,inline-block,inherit,inactive,ideograph-space,ideograph-parenthesis,ideograph-numeric,ideograph-alpha,horizontal,hidden,help,hand,groove,fixed,ellipsis,e-resize,double,dotted,distribute,distribute-space,distribute-letter,distribute-all-lines,disc,disabled,default,decimal,dashed,crosshair,collapse,col-resize,circle,char,center,capitalize,break-word,break-all,bottom,both,bolder,bold,block,bidi-override,below,baseline,auto,always,all-scroll,absolute,table,table-cell-all,bottom,both,bolder,bold,block,bidi-override,below,baseline,auto,always,all-scroll,absolute,table,table-cell,table-row\".split(\r\n    \",\",\r\n  )\r\n\r\nfunction isCssValue () {\r\n  return inArray(cache.replace(/^-(webkit|moz|ms|o)-/, \"\"), cssValues)\r\n}\r\n\r\nfunction handle (style) {\r\n  analysis.push([token, style])\r\n  i++\r\n}\r\n\r\nfunction handleSpace () {\r\n  style = space\r\n  cache = token\r\n  while (true) {\r\n    token = source[++i]\r\n    if (isSpace()) {\r\n      cache += token\r\n    } else {\r\n      push()\r\n      break\r\n    }\r\n  }\r\n}\r\n\r\nfunction hanldeNumber () {\r\n  style = purple\r\n  cache = token\r\n  while (true) {\r\n    token = source[++i]\r\n    if (isNumber()) {\r\n      cache += token\r\n    } else {\r\n      push()\r\n      break\r\n    }\r\n  }\r\n}\r\n\r\nfunction AnalysisForCSSCode () {\r\n  while (true) {\r\n    token = source[i]\r\n    if (!token) {\r\n      break\r\n    } else if (token === \"/\" && source[i + 1] === \"*\") {\r\n      cache = \"/*\"\r\n      i += 2\r\n\r\n      while (true) {\r\n        token = source[i]\r\n        if (!token) {\r\n          cache && push()\r\n          break\r\n        } else if (token === \"*\" && source[i + 1] === \"/\") {\r\n          cache += \"*/\"\r\n          push()\r\n          i += 2\r\n          break\r\n        } else if (isNewLine()) {\r\n          style = dark\r\n          cache && push()\r\n          handle(line)\r\n          cache = \"\"\r\n        } else {\r\n          cache += token\r\n          i++\r\n        }\r\n      }\r\n    } else if (token === \".\" || token === \"#\") {\r\n      match = token\r\n      i++\r\n      token = source[i]\r\n      if (isHtmlLetter()) {\r\n        getHtmlWord()\r\n        style = green\r\n        cache = match + cache\r\n        push()\r\n      } else {\r\n        style = white\r\n        cache = match\r\n        push()\r\n      }\r\n    } else if (token === \"[\") {\r\n      handle(white)\r\n      while (true) {\r\n        token = source[i]\r\n        if (!token || isNewLine()) {\r\n          break\r\n        } else if (token === \"]\") {\r\n          handle(white)\r\n          break\r\n        } else if (isHtmlLetter()) {\r\n          getHtmlWord()\r\n          style = green\r\n          push()\r\n        } else if (isSpace()) {\r\n          handleSpace()\r\n        } else if (token === \"=\") {\r\n          handle(red)\r\n          while (true) {\r\n            token = source[i]\r\n            if (!token || isNewLine() || token === \"]\") {\r\n              break\r\n            } else if (isSpace()) {\r\n              handleSpace()\r\n            } else if (token === '\"' || token === \"'\") {\r\n              match = cache = token\r\n              style = yellow\r\n              i++\r\n              while (true) {\r\n                token = source[i]\r\n                if (!token || isNewLine()) {\r\n                  cache && push()\r\n                  break\r\n                } else if (token === match) {\r\n                  cache += token\r\n                  push()\r\n                  i++\r\n                  break\r\n                } else {\r\n                  cache += token\r\n                  i++\r\n                }\r\n              }\r\n            } else if (isHtmlLetter()) {\r\n              getHtmlWord()\r\n              style = yellow\r\n              push()\r\n            } else {\r\n              handle(white)\r\n            }\r\n          }\r\n        } else {\r\n          cache = token\r\n          style = white\r\n          push()\r\n          i++\r\n        }\r\n      }\r\n    } else if (isNewLine()) {\r\n      handle(line)\r\n    } else if (token === \":\") {\r\n      handle(white)\r\n      while (true) {\r\n        token = source[i]\r\n        if (!token) {\r\n          break\r\n        } else if (isSpace()) {\r\n          handleSpace()\r\n        } else if (isNewLine()) {\r\n          handle(line)\r\n          break\r\n        } else if (isNumber() || token === \".\") {\r\n          getNumber()\r\n          style = purple\r\n          push()\r\n          // hanldeNumber();\r\n          // px em %\r\n          if (token === \"%\") {\r\n            handle(red)\r\n          } else if (token === \"s\") {\r\n            handle(red)\r\n          } else if (token === \"p\" && source[i + 1] === \"x\") {\r\n            cache = \"px\"\r\n            style = red\r\n            push()\r\n            i += 2\r\n          } else if (token === \"e\" && source[i + 1] === \"m\") {\r\n            cache = \"em\"\r\n            style = red\r\n            push()\r\n            i += 2\r\n          } else if (token === \"c\" && source[i + 1] === \"m\") {\r\n            cache = \"cm\"\r\n            style = red\r\n            push()\r\n            i += 2\r\n          }\r\n        } else if (isHtmlLetter()) {\r\n          if (token === \"-\") {\r\n            token = source[i + 1]\r\n            if (isNumber() || token === \".\") {\r\n              token = \"-\"\r\n              handle(purple)\r\n              continue\r\n            } else {\r\n              token = \"-\"\r\n            }\r\n          }\r\n          getHtmlWord()\r\n          if (isCssValue()) {\r\n            style = ryan\r\n            push()\r\n          } else if (cache === \"important\") {\r\n            style = red\r\n            push()\r\n          } else {\r\n            style = white\r\n            push()\r\n          }\r\n        } else if (token === \";\") {\r\n          handle(white)\r\n          break\r\n        } else if (token === \"#\") {\r\n          cache = match = token\r\n          i++\r\n          token = source[i]\r\n          if (isHex()) {\r\n            getHex()\r\n            cache = match + cache\r\n            style = purple\r\n            push()\r\n          } else {\r\n            style = white\r\n            push()\r\n            i++\r\n          }\r\n        } else if (token === \"#\") {\r\n          cache = match = token\r\n          i++\r\n          token = source[i]\r\n          if (isHex()) {\r\n            getHex()\r\n            cache = match + cache\r\n            style = purple\r\n            push()\r\n          } else {\r\n            style = white\r\n            push()\r\n            i++\r\n          }\r\n        } else if (token === \"!\") {\r\n          handle(red)\r\n        } else {\r\n          // ( ) ,\r\n          handle(white)\r\n        }\r\n      }\r\n    } else if (isSpace()) {\r\n      handleSpace()\r\n    } else if (isHtmlLetter()) {\r\n      getHtmlWord()\r\n      if (isTargetName()) {\r\n        style = red\r\n        push()\r\n      } else if (isCssKey()) {\r\n        style = ryan + italic\r\n        push()\r\n      } else {\r\n        style = white\r\n        push()\r\n      }\r\n    } else if (token === \"*\") {\r\n      handle(red)\r\n    } else if (token === \"-\") {\r\n      handle(purple)\r\n    } else if (token === \"@\") {\r\n      cache = token\r\n      style = red\r\n      i++\r\n      while (true) {\r\n        token = source[i]\r\n        if (!token || isNewLine()) {\r\n          cache && push()\r\n          break\r\n        } else if (token === \"{\") {\r\n          push()\r\n          break\r\n        } else {\r\n          cache += token\r\n          i++\r\n        }\r\n      }\r\n    } else {\r\n      handle(white)\r\n    }\r\n  }\r\n\r\n  return analysis\r\n}\r\n\r\nfunction AnalysisForMarkupCode () {\r\n  function handleWord () {\r\n    // tag attribute (name) = value\r\n    style = green\r\n    cache = token\r\n    while ((token = source[++i])) {\r\n      if (isHtmlLetter() || isNumber()) {\r\n        cache += token\r\n      } else {\r\n        push()\r\n        break\r\n      }\r\n    }\r\n\r\n    while (true) {\r\n      token = source[i]\r\n      if (isNewLine()) {\r\n        handle(line)\r\n      } else if (isSpace()) {\r\n        handleSpace()\r\n      } else {\r\n        break\r\n      }\r\n    }\r\n\r\n    if (token === \"=\") {\r\n      cache = token\r\n      // tag attribute name (=) value\r\n      style = white\r\n      i++\r\n      push()\r\n\r\n      if (isSpace()) {\r\n        handleSpace()\r\n      }\r\n      token = source[i]\r\n      if (token === '\"' || token === \"'\") {\r\n        // attribute value\r\n        style = yellow\r\n        match = cache = token\r\n        while ((token = source[++i])) {\r\n          if (token === match) {\r\n            cache += token\r\n            push()\r\n            i++\r\n            break\r\n          } else if (isNewLine()) {\r\n            push()\r\n            style = line\r\n            cache = token\r\n            i++\r\n            push()\r\n          } else {\r\n            cache += token\r\n          }\r\n        }\r\n      } else {\r\n        if (!(!token || isNewLine() || token === \">\")) {\r\n          style = yellow\r\n          cache = token\r\n          while (true) {\r\n            token = source[++i]\r\n            if (!token || isNewLine() || token === \">\" || token === \" \") {\r\n              push()\r\n              break\r\n            } else {\r\n              cache += token\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function handleInnerTag () {\r\n    const endIndex = source.indexOf(\"</\" + matchTag + \">\", i)\r\n    if (endIndex !== -1 && endIndex > i) {\r\n      const preSource = source\r\n      source = source.substring(i, endIndex)\r\n      i = 0\r\n      if (matchTag === \"style\") {\r\n        AnalysisForCSSCode()\r\n      } else {\r\n        AnalysisForSourceCode()\r\n      }\r\n      source = preSource\r\n      i = endIndex\r\n    }\r\n  }\r\n\r\n  let matchTag = \"\"\r\n  let isEndTag = 0\r\n  while (true) {\r\n    token = source[i]\r\n    if (!token) {\r\n      break\r\n    } else if (token === \"<\") {\r\n      if (source[i + 1] === \"!\") {\r\n        if (source[i + 2] === \"-\" && source[i + 3] === \"-\") {\r\n          cache = \"<!--\"\r\n          style = dark\r\n          i += 4\r\n          while (true) {\r\n            token = source[i]\r\n            if (!token) {\r\n              cache && push()\r\n            } else if (\r\n              token === \"-\" &&\r\n              source[i + 1] === \"-\" &&\r\n              source[i + 2] === \">\"\r\n            ) {\r\n              cache += \"-->\"\r\n              push()\r\n              i += 3\r\n              break\r\n            } else if (isNewLine()) {\r\n              cache && push()\r\n              handle(line)\r\n              cache = \"\"\r\n            } else {\r\n              cache += token\r\n              i++\r\n            }\r\n          }\r\n          continue\r\n        }\r\n      }\r\n\r\n      handle(white)\r\n      token = source[i]\r\n\r\n      if (token === \"!\" || token === \"?\") {\r\n        handle(white)\r\n      } else if (token === \"/\") {\r\n        handle(white)\r\n        isEndTag = 1\r\n      } else {\r\n        isEndTag = 0\r\n      }\r\n\r\n      token = source[i]\r\n      if (isHtmlLetter()) {\r\n        // tag name\r\n        getHtmlWord()\r\n        if (isEndTag) {\r\n          matchTag = \"\"\r\n        } else {\r\n          matchTag = cache\r\n        }\r\n        style = red\r\n        push()\r\n        while ((token = source[i])) {\r\n          if (token === \">\") {\r\n            // tag end\r\n            handle(white)\r\n            if (matchTag === \"script\" || matchTag === \"style\") {\r\n              handleInnerTag()\r\n            }\r\n            break\r\n          } else if (isSpace()) {\r\n            handleSpace()\r\n          } else if (token === '\"' || token === \"'\") {\r\n            // attribute value\r\n            style = yellow\r\n            cache = match = token\r\n            while ((token = source[++i])) {\r\n              if (token === match) {\r\n                cache += token\r\n                i++\r\n                push()\r\n                break\r\n              } else {\r\n                cache += token\r\n              }\r\n            }\r\n          } else if (isHtmlLetter() || isNumber()) {\r\n            // tag inner word\r\n            handleWord()\r\n          } else if (isPunctuation()) {\r\n            // for\r\n            handle(white)\r\n          } else if (isNewLine()) {\r\n            handle(line)\r\n          } else {\r\n            handle(\"fail\")\r\n          }\r\n        }\r\n      }\r\n    } else if (isNewLine()) {\r\n      handle(line)\r\n    } else if (isSpace()) {\r\n      handleSpace()\r\n    } else {\r\n      // inner html\r\n      style = white\r\n      cache = token\r\n      while (true) {\r\n        token = source[++i]\r\n        if (!token || isNewLine() || token === \"<\") {\r\n          push()\r\n          break\r\n        } else {\r\n          cache += token\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return analysis\r\n}\r\n\r\nfunction AnalysisForSourceCode () {\r\n  function isRegExp () {\r\n    let _i\r\n    if (token === \"/\") {\r\n      _i = i\r\n      while (true) {\r\n        token = source[--_i]\r\n        if (isSpace()) {\r\n          continue\r\n        } else if (\r\n          token === \"=\" ||\r\n          token === \":\" ||\r\n          token === \"(\" ||\r\n          token === \"|\" ||\r\n          token === \"?\" ||\r\n          isNewLine() ||\r\n          !token\r\n        ) {\r\n          _i = i\r\n          while ((token = source[++_i])) {\r\n            if (isNewLine() || !token) {\r\n              break\r\n            } else if (token === \"\\\\\") {\r\n              _i++\r\n              continue\r\n            } else if (token === \"/\") {\r\n              return 1\r\n            } else {\r\n              continue\r\n            }\r\n          }\r\n          break\r\n        } else {\r\n          break\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function handlePunctuation () {\r\n    if (token === \"/\" && source[i + 1] === \"*\") {\r\n      cache = \"/*\"\r\n      i += 2\r\n\r\n      while (true) {\r\n        token = source[i]\r\n        if (!token) {\r\n          cache && push()\r\n          break\r\n        } else if (token === \"*\" && source[i + 1] === \"/\") {\r\n          cache += \"*/\"\r\n          push()\r\n          i += 2\r\n          break\r\n        } else if (isNewLine()) {\r\n          style = dark\r\n          cache && push()\r\n          handle(line)\r\n          cache = \"\"\r\n        } else {\r\n          cache += token\r\n          i++\r\n        }\r\n      }\r\n    } else if (token === \"/\" && source[i + 1] === \"/\") {\r\n      (cache = \"//\")\r\n      i++\r\n      style = dark\r\n      while (true) {\r\n        token = source[++i]\r\n        if (!token) {\r\n          push()\r\n          break\r\n        } else if (isNewLine()) {\r\n          push()\r\n          cache = token\r\n          style = line\r\n          push()\r\n          break\r\n        } else {\r\n          cache += token\r\n        }\r\n      }\r\n      i++\r\n    } else if (token === \"'\" || token === '\"') {\r\n      match = cache = token\r\n      while (true) {\r\n        token = source[++i]\r\n        if (!token || isNewLine()) {\r\n          cache && push()\r\n          break\r\n        } else if (token === \"\\\\\") {\r\n          style = yellow\r\n          push()\r\n          cache = token + source[++i]\r\n          style = purple\r\n          push()\r\n          cache = \"\"\r\n        } else if (token === match) {\r\n          cache += token\r\n          style = yellow\r\n          push()\r\n          break\r\n        } else {\r\n          cache += token\r\n        }\r\n      }\r\n      i++\r\n    } else if (token === \"/\" || isLogistic()) {\r\n      match = isRegExp()\r\n      if (match === 1) {\r\n        cache = \"/\"\r\n        style = \"yellow hehe\"\r\n        push()\r\n        i++\r\n        while (true) {\r\n          token = source[i]\r\n          if (!token || isNewLine()) {\r\n            cache && push()\r\n          } else if (token === \"\\\\\") {\r\n            style = purple\r\n            cache = token + source[++i]\r\n            push()\r\n            i++\r\n          } else if (token === \"/\") {\r\n            style = yellow\r\n            cache = token\r\n            push()\r\n            i++\r\n            cache = \"\"\r\n            while ((token = source[i])) {\r\n              if (~\"gi\".indexOf(token)) {\r\n                style = red\r\n                cache += token\r\n                i++\r\n              } else {\r\n                break\r\n              }\r\n            }\r\n            cache && push()\r\n            break\r\n          } else if (isLogistic()) {\r\n            handle(red)\r\n          } else if (isLetter()) {\r\n            style = yellow\r\n            getWord()\r\n            push()\r\n            cache = \"\"\r\n          } else {\r\n            handle(yellow)\r\n          }\r\n        }\r\n      } else {\r\n        // logic\r\n        style = red\r\n        cache = source[i]\r\n        while ((token = source[++i])) {\r\n          if (isLogistic()) {\r\n            cache += token\r\n          } else {\r\n            push()\r\n            break\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      handle(white)\r\n    }\r\n  }\r\n\r\n  function handleNumberAndHex () {\r\n    style = purple\r\n    cache = token\r\n    if (token === \"0\" && (source[i + 1] === \"x\" || source[i + 1] === \"X\")) {\r\n      // oxabc十六进制\r\n      cache += source[++i]\r\n      while (true) {\r\n        token = source[++i]\r\n        if (isHex()) {\r\n          cache += token\r\n        } else {\r\n          push()\r\n          break\r\n        }\r\n      }\r\n    } else {\r\n      hanldeNumber()\r\n    }\r\n  }\r\n\r\n  function handleFunction () {\r\n    let len = analysis.length - 1\r\n    if (len > -1) {\r\n      token = analysis[len][0][0]\r\n      if (isSpace()) {\r\n        len--\r\n        token = analysis[len][0][0]\r\n      }\r\n      if (token === \":\" || token === \"=\") {\r\n        len--\r\n        token = analysis[len][0][0]\r\n        if (isSpace()) {\r\n          len--\r\n          token = analysis[len][0][0]\r\n        }\r\n        if (isLetter()) {\r\n          analysis[len][1] = \"green\"\r\n        }\r\n      }\r\n    }\r\n    token = source[i]\r\n    cache = \"function\"\r\n    style = ryan + italic\r\n    push()\r\n  }\r\n\r\n  while (true) {\r\n    token = source[i]\r\n    if (!token) {\r\n      break\r\n    } else if (isSpace()) {\r\n      handleSpace()\r\n    } else if (isNewLine()) {\r\n      handle(line)\r\n    } else if (isNumber()) {\r\n      handleNumberAndHex()\r\n    } else if (isLetter()) {\r\n      getWord()\r\n      if (cache === \"function\") {\r\n        handleFunction()\r\n        if (isSpace()) {\r\n          handleSpace()\r\n        }\r\n        if (isLetter()) {\r\n          getWord()\r\n          style = green\r\n          push()\r\n          if (isSpace()) {\r\n            handleSpace()\r\n          }\r\n        }\r\n        if (token === \"(\") {\r\n          handle(white)\r\n          while (true) {\r\n            token = source[i]\r\n            if (isSpace()) {\r\n              handleSpace()\r\n            } else if (token === \",\") {\r\n              handle(white)\r\n            } else if (isLetter()) {\r\n              getWord()\r\n              style = gold + italic\r\n              push()\r\n            } else {\r\n              break\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        if (isVariable()) {\r\n          style = ryan + italic\r\n        } else if (isKeyword()) {\r\n          style = red\r\n        } else if (isParameter()) {\r\n          style = gold + italic\r\n        } else if (isNormal()) {\r\n          style = ryan\r\n        } else if (isConstant()) {\r\n          style = purple\r\n        } else {\r\n          style = white\r\n\r\n          if (token === \"(\") {\r\n            style = ryan\r\n          } else if (isSpace()) {\r\n            while (true) {\r\n              token = source[i + 1]\r\n              if (isSpace()) {\r\n                handleSpace()\r\n              } else if (token === \"(\") {\r\n                style = ryan\r\n                break\r\n              } else {\r\n                break\r\n              }\r\n            }\r\n          }\r\n        }\r\n        push()\r\n      }\r\n    } else if (isPunctuation()) {\r\n      handlePunctuation()\r\n    } else {\r\n      handle(\"fail\")\r\n    }\r\n  }\r\n  return analysis\r\n}\r\n\r\nfunction AnalysisFor (s, indent) {\r\n  source = s\r\n  if (indent) {\r\n    const reg = new RegExp(\"^\\\\s{\" + indent + \"}\")\r\n    source = source\r\n      .split(/\\n|\\r|(?:\\r\\n)/)\r\n      .map(function (v) {\r\n        return v.replace(reg, \"\")\r\n      })\r\n      .join(\"\\n\")\r\n  }\r\n  i = 0\r\n  analysis = []\r\n  return /^\\s*</.test(source)\r\n    ? AnalysisForMarkupCode()\r\n    : AnalysisForSourceCode()\r\n}\r\n\r\nfunction AnalysisForElement (script) {\r\n  if (!script.coded) {\r\n    script.coded = true\r\n    const firstChild = script.firstChild\r\n    if (firstChild) {\r\n      const codes = AnalysisFor(\r\n        firstChild.nodeValue.replace(/^\\s+|\\s+$/g, \"\"),\r\n        script.getAttribute(\"code\"),\r\n      )\r\n      const ol = createElement(codes)\r\n      script.replaceChild(ol, firstChild)\r\n      script.style.display = \"block\"\r\n    }\r\n  }\r\n}\r\n\r\nfunction createElement (codes) {\r\n  const ol = document.createElement(\"ol\")\r\n  let li = document.createElement(\"li\")\r\n  let count = 0\r\n  for (let x = 0, len = codes.length; x < len; x++) {\r\n    const code = codes[x]\r\n    const span = document.createElement(\"span\")\r\n    span.appendChild(document.createTextNode(code[0]))\r\n    span.className = code[1]\r\n    if (span.className === \"line\") {\r\n      ol.appendChild(li)\r\n      li = document.createElement(\"li\")\r\n      count++\r\n    } else {\r\n      li.appendChild(span)\r\n    }\r\n  }\r\n  ol.style.paddingLeft = String(count).length / 2 + 1.3 + \"em\"\r\n  ol.appendChild(li)\r\n  return ol\r\n}\r\n\r\nfunction AnalysisForTagName (tagname) {\r\n  const scripts = document.getElementsByTagName(tagname)\r\n  for (let k = 0, len = scripts.length; k < len; k++) {\r\n    const script = scripts[k]\r\n    script.hasAttribute(\"code\") && AnalysisForElement(script)\r\n  }\r\n}\r\n\r\nfunction code (element, indent) {\r\n  if (!element) {\r\n    AnalysisForTagName(\"xmp\")\r\n    AnalysisForTagName(\"script\")\r\n    AnalysisForTagName(\"pre\")\r\n  } else {\r\n    if (element instanceof Node) {\r\n      element.setAttribute(\"code\", \"\")\r\n      AnalysisForElement(element)\r\n    } else {\r\n      return AnalysisFor(element.toString(), indent)\r\n    }\r\n  }\r\n}\r\n\r\ncode.createElement = createElement\r\n\r\nmodule.exports = code\r\n"],"names":["console","log","line","dark","italic","white","purple","gold","red","green","yellow","ryan","token","style","cache","match","i","analysis","source","inArray","value","arr","x","len","length","push","isSpace","test","isNewLine","isHex","isNumber","isPunctuation","indexOf","isLetter","isHtmlLetter","isLogistic","keywords","split","variable","parameter","normal","getHex","getNumber","getWord","getHtmlWord","tagnames","cssKeys","cssValues","handle","handleSpace","AnalysisForMarkupCode","handleWord","handleInnerTag","endIndex","matchTag","preSource","substring","replace","AnalysisForCSSCode","AnalysisForSourceCode","isEndTag","handlePunctuation","_i","isRegExp","handleNumberAndHex","hanldeNumber","handleFunction","AnalysisFor","s","indent","reg","RegExp","map","v","join","AnalysisForElement","script","coded","firstChild","ol","createElement","nodeValue","getAttribute","replaceChild","display","codes","document","li","count","code","span","appendChild","createTextNode","className","paddingLeft","String","AnalysisForTagName","tagname","scripts","getElementsByTagName","k","hasAttribute","element","Node","toString","setAttribute"],"mappings":"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"}