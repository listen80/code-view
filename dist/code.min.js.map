{"version":3,"file":"code.min.js","sources":["../src/index.js"],"sourcesContent":["var space = \"space\",\n  line = \"line\",\n  dark = \"dark\",\n  italic = \" i\",\n  white = \"white\",\n  purple = \"purple\",\n  gold = \"gold\",\n  red = \"red\",\n  green = \"green\",\n  yellow = \"yellow\",\n  ryan = \"ryan\";\n\nvar source = \"\";\nvar token, style, cache, match, i, analysis;\n\nfunction in_array(value, arr) {\n  for (var x = 0, len = arr.length; x < len; x++) {\n    if (arr[x] === value) {\n      return 1;\n    }\n  }\n}\n\nfunction push() {\n  analysis.push([cache, style]);\n}\n\nfunction isSpace() {\n  return token && /[\\v\\t ]/.test(token);\n}\n\nfunction isNewLine() {\n  return token === \"\\n\" || token === \"\\r\";\n}\n\nfunction isHex() {\n  return token && /[0-9A-Fa-f]/.test(token);\n}\n\nfunction isNumber() {\n  return token && /[0-9]/.test(token);\n}\n\nfunction isPunctuation() {\n  return \"~`!@#$%^&*()-_+=[]{}\\\\;:'\\\"|,.<>/?\".indexOf(token) !== -1;\n}\n\nfunction isLetter() {\n  return token && /[a-zA-Z_]/.test(token);\n}\n\nfunction isHtmlLetter() {\n  return isLetter() || token === \"-\";\n}\n\nfunction isLogistic() {\n  return \"$!+-=*%&|^<>\".indexOf(token) !== -1;\n}\n\nvar keywords =\n  \"break,case,catch,const,continue,debugger,default,delete,do,else,extends,finally,for,if,import,in,instanceof,let,new,return,super,switch,throw,try,typeof,var,void,while,with\".split(\n    \",\"\n  );\n\nfunction isKeyword() {\n  return in_array(cache, keywords);\n}\n\nfunction isConstant() {\n  return in_array(cache, [\"null\", \"true\", \"false\", \"undefined\"]);\n}\n\nvar variable = [\"var\", \"let\", \"const\"];\n\nfunction isVariable() {\n  return in_array(cache, variable);\n}\n\nvar parameter = [\"self\", \"this\", \"argument\"];\n\nfunction isParameter() {\n  return in_array(cache, parameter);\n}\n\nvar normal = [\n  \"prototype\",\n  \"module\",\n  \"window\",\n  \"document\",\n  \"history\",\n  \"location\",\n  \"screen\",\n  \"console\",\n  \"Object\",\n  \"Array\",\n  \"Number\",\n  \"Boolean\",\n  \"String\",\n  \"RegExp\",\n  \"Math\",\n];\n\nfunction isNormal() {\n  return in_array(cache, normal);\n}\n\nfunction getHex() {\n  style = purple;\n  cache = token;\n  while (true) {\n    token = source[++i];\n    if (isHex()) {\n      cache += token;\n    } else {\n      break;\n    }\n  }\n}\n\nfunction getNumber() {\n  cache = token;\n  while (true) {\n    token = source[++i];\n    if (isNumber()) {\n      cache += token;\n    } else if (token === \".\") {\n      cache += token;\n      while (true) {\n        token = source[++i];\n        if (isNumber()) {\n          cache += token;\n        } else {\n          break;\n        }\n      }\n      break;\n    } else {\n      break;\n    }\n  }\n}\n\nfunction getWord() {\n  cache = token;\n  while (true) {\n    token = source[++i];\n    if (isLetter() || isNumber()) {\n      cache += token;\n    } else {\n      break;\n    }\n  }\n}\n\nfunction getHtmlWord() {\n  cache = token;\n  while (true) {\n    token = source[++i];\n    if (isHtmlLetter() || isNumber()) {\n      cache += token;\n    } else {\n      break;\n    }\n  }\n}\n\nvar tagnames =\n  \"a,abbr,address,area,article,aside,audio,b,base,bdi,bdo,big,blockquote,body,br,button,canvas,caption,center,cite,code,datalist,dd,del,details,dfn,dialog,dir,div,dl,dt,em,embed,fieldset,figcaption,figure,font,footer,form,frame,frameset,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,i,iframe,img,input,ins,kbd,keygen,label,legend,li,link,main,map,mark,nav,object,ol,optgroup,option,p,pre,progress,q,s,samp,script,section,select,small,span,strong,sub,summary,sup,table,tbody,td,textarea,tfoot,th,thead,tr,u,ul,video\".split(\n    \",\"\n  );\n\nfunction isTargetName() {\n  return in_array(cache, tagnames);\n}\n\nvar cssKeys =\n  \"align-content,align-items,align-self,alignment-baseline,all,animation,animation-delay,animation-direction,animation-duration,animation-fill-mode,animation-iteration-count,animation-name,animation-play-state,animation-timing-function,backface-visibility,background,background-attachment,background-blend-mode,background-clip,background-color,background-image,background-origin,background-position,background-position-x,background-position-y,background-repeat,background-repeat-x,background-repeat-y,background-size,baseline-shift,border,border-bottom,border-bottom-color,border-bottom-left-radius,border-bottom-right-radius,border-bottom-style,border-bottom-width,border-collapse,border-color,border-image,border-image-outset,border-image-repeat,border-image-slice,border-image-source,border-image-width,border-left,border-left-color,border-left-style,border-left-width,border-radius,border-right,border-right-color,border-right-style,border-right-width,border-spacing,border-style,border-top,border-top-color,border-top-left-radius,border-top-right-radius,border-top-style,border-top-width,border-width,bottom,box-shadow,box-sizing,break-after,break-before,break-inside,buffered-rendering,caption-side,clear,clip,clip-path,clip-rule,color,color-interpolation,color-interpolation-filters,color-rendering,column-count,column-fill,column-gap,column-rule,column-rule-color,column-rule-style,column-rule-width,column-span,column-width,columns,contain,content,counter-increment,counter-reset,cursor,cx,cy,d,direction,display,dominant-baseline,empty-cells,fill,fill-opacity,fill-rule,filter,flex,flex-basis,flex-direction,flex-flow,flex-grow,flex-shrink,flex-wrap,float,flood-color,flood-opacity,font,font-family,font-feature-settings,font-kerning,font-size,font-stretch,font-style,font-variant,font-variant-caps,font-variant-ligatures,font-variant-numeric,font-weight,height,hyphens,image-rendering,isolation,justify-content,left,letter-spacing,lighting-color,line-height,list-style,list-style-image,list-style-position,list-style-type,margin,margin-bottom,margin-left,margin-right,margin-top,marker,marker-end,marker-mid,marker-start,mask,mask-type,max-height,max-width,max-zoom,min-height,min-width,min-zoom,mix-blend-mode,motion,object-fit,object-position,offset,offset-distance,offset-path,offset-rotation,opacity,order,orientation,orphans,outline,outline-color,outline-offset,outline-style,outline-width,overflow,overflow-wrap,overflow-x,overflow-y,padding,padding-bottom,padding-left,padding-right,padding-top,page,page-break-after,page-break-before,page-break-inside,paint-order,perspective,perspective-origin,pointer-events,position,quotes,r,resize,right,rx,ry,shape-image-threshold,shape-margin,shape-outside,shape-rendering,size,speak,src,stop-color,stop-opacity,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,tab-size,table-layout,text-align,text-align-last,text-anchor,text-combine-upright,text-decoration,text-indent,text-orientation,text-overflow,text-rendering,text-shadow,text-size-adjust,text-transform,top,touch-action,transform,transform-origin,transform-style,transition,transition-delay,transition-duration,transition-property,transition-timing-function,unicode-bidi,unicode-range,user-select,user-zoom,vector-effect,vertical-align,visibility,webkit-app-region,webkit-appearance,webkit-background-clip,webkit-background-origin,webkit-border-after,webkit-border-after-color,webkit-border-after-style,webkit-border-after-width,webkit-border-before,webkit-border-before-color,webkit-border-before-style,webkit-border-before-width,webkit-border-end,webkit-border-end-color,webkit-border-end-style,webkit-border-end-width,webkit-border-horizontal-spacing,webkit-border-image,webkit-border-start,webkit-border-start-color,webkit-border-start-style,webkit-border-start-width,webkit-border-vertical-spacing,webkit-box-align,webkit-box-decoration-break,webkit-box-direction,webkit-box-flex,webkit-box-flex-group,webkit-box-lines,webkit-box-ordinal-group,webkit-box-orient,webkit-box-pack,webkit-box-reflect,webkit-column-break-after,webkit-column-break-before,webkit-column-break-inside,webkit-font-size-delta,webkit-font-smoothing,webkit-highlight,webkit-hyphenate-character,webkit-line-break,webkit-line-clamp,webkit-locale,webkit-logical-height,webkit-logical-width,webkit-margin-after,webkit-margin-after-collapse,webkit-margin-before,webkit-margin-before-collapse,webkit-margin-bottom-collapse,webkit-margin-collapse,webkit-margin-end,webkit-margin-start,webkit-margin-top-collapse,webkit-mask,webkit-mask-box-image,webkit-mask-box-image-outset,webkit-mask-box-image-repeat,webkit-mask-box-image-slice,webkit-mask-box-image-source,webkit-mask-box-image-width,webkit-mask-clip,webkit-mask-composite,webkit-mask-image,webkit-mask-origin,webkit-mask-position,webkit-mask-position-x,webkit-mask-position-y,webkit-mask-repeat,webkit-mask-repeat-x,webkit-mask-repeat-y,webkit-mask-size,webkit-max-logical-height,webkit-max-logical-width,webkit-min-logical-height,webkit-min-logical-width,webkit-padding-after,webkit-padding-before,webkit-padding-end,webkit-padding-start,webkit-perspective-origin-x,webkit-perspective-origin-y,webkit-print-color-adjust,webkit-rtl-ordering,webkit-ruby-position,webkit-tap-highlight-color,webkit-text-combine,webkit-text-decorations-in-effect,webkit-text-emphasis,webkit-text-emphasis-color,webkit-text-emphasis-position,webkit-text-emphasis-style,webkit-text-fill-color,webkit-text-orientation,webkit-text-security,webkit-text-stroke,webkit-text-stroke-color,webkit-text-stroke-width,webkit-transform-origin-x,webkit-transform-origin-y,webkit-transform-origin-z,webkit-user-drag,webkit-user-modify,webkit-writing-mode,white-space,widows,width,will-change,word-break,word-spacing,word-wrap,writing-mode,x,y,z-index,zoom\".split(\n    \",\"\n  );\n\nfunction isCssKey() {\n  return in_array(cache.replace(/^-(webkit|moz|ms|o)-/, \"\"), cssKeys);\n}\n\nvar cssValues =\n  \"red,blue,yellow,green,lime,content-box,border-box,translateX,translateY,translateZ,url,rgba,rgb,whitespace,wait,w-resize,visible,vertical-text,vertical-ideographic,uppercase,upper-roman,upper-alpha,underline,transparent,top,thin,thick,text,text-top,text-bottom,tb-rl,table-header-group,table-footer-group,sw-resize,super,strict,static,square,solid,small-caps,separate,se-resize,scroll,s-resize,rtl,row-resize,ridge,right,repeat,repeat-y,repeat-x,relative,progress,pointer,overline,outside,outset,oblique,nowrap,not-allowed,normal,none,nw-resize,no-repeat,no-drop,newspaper,ne-resize,n-resize,move,middle,medium,ltr,lr-tb,lowercase,lower-roman,lower-alpha,loose,list-item,line,line-through,line-edge,lighter,left,keep-all,justify,italic,inter-word,inter-ideograph,inside,inset,inline,inline-block,inherit,inactive,ideograph-space,ideograph-parenthesis,ideogwhitespace,wait,w-resize,visible,vertical-text,vertical-ideographic,uppercase,upper-roman,upper-alpha,underline,transparent,top,thin,thick,text,text-top,text-bottom,tb-rl,table-header-group,table-footer-group,sw-resize,super,strict,static,square,solid,small-caps,separate,se-resize,scroll,s-resize,rtl,row-resize,ridge,right,repeat,repeat-y,repeat-x,relative,progress,pointer,overline,outside,outset,oblique,nowrap,not-allowed,normal,none,nw-resize,no-repeat,no-drop,newspaper,ne-resize,n-resize,move,middle,medium,ltr,lr-tb,lowercase,lower-roman,lower-alpha,loose,list-item,line,line-through,line-edge,lighter,left,keep-all,justify,italic,inter-word,inter-ideograph,inside,inset,inline,inline-block,inherit,inactive,ideograph-space,ideograph-parenthesis,ideograph-numeric,ideograph-alpha,horizontal,hidden,help,hand,groove,fixed,ellipsis,e-resize,double,dotted,distribute,distribute-space,distribute-letter,distribute-all-lines,disc,disabled,default,decimal,dashed,crosshair,collapse,col-resize,circle,char,center,capitalize,break-word,break-all,bottom,both,bolder,bold,block,bidi-override,below,baseline,auto,always,all-scroll,absolute,table,table-cell-all,bottom,both,bolder,bold,block,bidi-override,below,baseline,auto,always,all-scroll,absolute,table,table-cell,table-row\".split(\n    \",\"\n  );\n\nfunction isCssValue() {\n  return in_array(cache.replace(/^-(webkit|moz|ms|o)-/, \"\"), cssValues);\n}\n\nfunction handle(style) {\n  analysis.push([token, style]);\n  i++;\n}\n\nfunction handleSpace() {\n  style = space;\n  cache = token;\n  while (true) {\n    token = source[++i];\n    if (isSpace()) {\n      cache += token;\n    } else {\n      push();\n      break;\n    }\n  }\n}\n\nfunction hanldeNumber() {\n  style = purple;\n  cache = token;\n  while (true) {\n    token = source[++i];\n    if (isNumber()) {\n      cache += token;\n    } else {\n      push();\n      break;\n    }\n  }\n}\n\nfunction AnalysisForCSSCode() {\n  while (true) {\n    token = source[i];\n    if (!token) {\n      break;\n    } else if (token === \"/\" && source[i + 1] === \"*\") {\n      cache = \"/*\";\n      i += 2;\n\n      while (true) {\n        token = source[i];\n        if (!token) {\n          cache && push();\n          break;\n        } else if (token === \"*\" && source[i + 1] === \"/\") {\n          cache += \"*/\";\n          push();\n          i += 2;\n          break;\n        } else if (isNewLine()) {\n          style = dark;\n          cache && push();\n          handle(line);\n          cache = \"\";\n        } else {\n          cache += token;\n          i++;\n        }\n      }\n    } else if (token === \".\" || token === \"#\") {\n      match = token;\n      i++;\n      token = source[i];\n      if (isHtmlLetter()) {\n        getHtmlWord();\n        style = green;\n        cache = match + cache;\n        push();\n      } else {\n        style = white;\n        cache = match;\n        push();\n      }\n    } else if (token === \"[\") {\n      handle(white);\n      while (true) {\n        token = source[i];\n        if (!token || isNewLine()) {\n          break;\n        } else if (token === \"]\") {\n          handle(white);\n          break;\n        } else if (isHtmlLetter()) {\n          getHtmlWord();\n          style = green;\n          push();\n        } else if (isSpace()) {\n          handleSpace();\n        } else if (token === \"=\") {\n          handle(red);\n          while (true) {\n            token = source[i];\n            if (!token || isNewLine() || token === \"]\") {\n              break;\n            } else if (isSpace()) {\n              handleSpace();\n            } else if (token === '\"' || token === \"'\") {\n              match = cache = token;\n              style = yellow;\n              i++;\n              while (true) {\n                token = source[i];\n                if (!token || isNewLine()) {\n                  cache && push();\n                  break;\n                } else if (token === match) {\n                  cache += token;\n                  push();\n                  i++;\n                  break;\n                } else {\n                  cache += token;\n                  i++;\n                }\n              }\n            } else if (isHtmlLetter()) {\n              getHtmlWord();\n              style = yellow;\n              push();\n            } else {\n              handle(white);\n            }\n          }\n        } else {\n          cache = token;\n          style = white;\n          push();\n          i++;\n        }\n      }\n    } else if (isNewLine()) {\n      handle(line);\n    } else if (token === \":\") {\n      handle(white);\n      while (true) {\n        token = source[i];\n        if (!token) {\n          break;\n        } else if (isSpace()) {\n          handleSpace();\n        } else if (isNewLine()) {\n          handle(line);\n          break;\n        } else if (isNumber() || token === \".\") {\n          getNumber();\n          style = purple;\n          push();\n          // hanldeNumber();\n          // px em %\n          if (token === \"%\") {\n            handle(red);\n          } else if (token === \"s\") {\n            handle(red);\n          } else if (token === \"p\" && source[i + 1] === \"x\") {\n            cache = \"px\";\n            style = red;\n            push();\n            i += 2;\n          } else if (token === \"e\" && source[i + 1] === \"m\") {\n            cache = \"em\";\n            style = red;\n            push();\n            i += 2;\n          } else if (token === \"c\" && source[i + 1] === \"m\") {\n            cache = \"cm\";\n            style = red;\n            push();\n            i += 2;\n          }\n        } else if (isHtmlLetter()) {\n          if (token === \"-\") {\n            token = source[i + 1];\n            if (isNumber() || token === \".\") {\n              token = \"-\";\n              handle(purple);\n              continue;\n            } else {\n              token = \"-\";\n            }\n          }\n          getHtmlWord();\n          if (isCssValue()) {\n            style = ryan;\n            push();\n          } else if (cache === \"important\") {\n            style = red;\n            push();\n          } else {\n            style = white;\n            push();\n          }\n        } else if (token === \";\") {\n          handle(white);\n          break;\n        } else if (token === \"#\") {\n          cache = match = token;\n          i++;\n          token = source[i];\n          if (isHex()) {\n            getHex();\n            cache = match + cache;\n            style = purple;\n            push();\n          } else {\n            style = white;\n            push();\n            i++;\n          }\n        } else if (token === \"#\") {\n          cache = match = token;\n          i++;\n          token = source[i];\n          if (isHex()) {\n            getHex();\n            cache = match + cache;\n            style = purple;\n            push();\n          } else {\n            style = white;\n            push();\n            i++;\n          }\n        } else if (token === \"!\") {\n          handle(red);\n        } else {\n          // ( ) ,\n          handle(white);\n        }\n      }\n    } else if (isSpace()) {\n      handleSpace();\n    } else if (isHtmlLetter()) {\n      getHtmlWord();\n      if (isTargetName()) {\n        style = red;\n        push();\n      } else if (isCssKey()) {\n        style = ryan + italic;\n        push();\n      } else {\n        style = white;\n        push();\n      }\n    } else if (token === \"*\") {\n      handle(red);\n    } else if (token === \"-\") {\n      handle(purple);\n    } else if (token === \"@\") {\n      cache = token;\n      style = red;\n      i++;\n      while (true) {\n        token = source[i];\n        if (!token || isNewLine()) {\n          cache && push();\n          break;\n        } else if (token === \"{\") {\n          push();\n          break;\n        } else {\n          cache += token;\n          i++;\n        }\n      }\n    } else {\n      handle(white);\n    }\n  }\n\n  return analysis;\n}\n\nfunction AnalysisForMarkupCode() {\n  function handleWord() {\n    // tag attribute (name) = value\n    style = green;\n    cache = token;\n    while ((token = source[++i])) {\n      if (isHtmlLetter() || isNumber()) {\n        cache += token;\n      } else {\n        push();\n        break;\n      }\n    }\n\n    while (true) {\n      token = source[i];\n      if (isNewLine()) {\n        handle(line);\n      } else if (isSpace()) {\n        handleSpace();\n      } else {\n        break;\n      }\n    }\n\n    if (token === \"=\") {\n      cache = token;\n      // tag attribute name (=) value\n      style = white;\n      i++;\n      push();\n\n      if (isSpace()) {\n        handleSpace();\n      }\n      token = source[i];\n      if (token === '\"' || token === \"'\") {\n        // attribute value\n        style = yellow;\n        match = cache = token;\n        while ((token = source[++i])) {\n          if (token === match) {\n            cache += token;\n            push();\n            i++;\n            break;\n          } else if (isNewLine()) {\n            push();\n            style = line;\n            cache = token;\n            i++;\n            push();\n          } else {\n            cache += token;\n          }\n        }\n      } else {\n        if (!(!token || isNewLine() || token === \">\")) {\n          style = yellow;\n          cache = token;\n          while (true) {\n            token = source[++i];\n            if (!token || isNewLine() || token === \">\" || token === \" \") {\n              push();\n              break;\n            } else {\n              cache += token;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  function handleInnerTag() {\n    var endIndex = source.indexOf(\"</\" + matchTag + \">\", i);\n    if (endIndex !== -1 && endIndex > i) {\n      var preSource = source;\n      source = source.substring(i, endIndex);\n      i = 0;\n      if (matchTag === \"style\") {\n        AnalysisForCSSCode();\n      } else {\n        AnalysisForSourceCode();\n      }\n      source = preSource;\n      i = endIndex;\n    }\n  }\n\n  var matchTag = \"\";\n  var isEndTag = 0;\n  while (true) {\n    token = source[i];\n    if (!token) {\n      break;\n    } else if (token === \"<\") {\n      if (source[i + 1] === \"!\") {\n        if (source[i + 2] === \"-\" && source[i + 3] === \"-\") {\n          cache = \"<!--\";\n          style = dark;\n          i += 4;\n          while (true) {\n            token = source[i];\n            if (!token) {\n              cache && push();\n            } else if (\n              token === \"-\" &&\n              source[i + 1] === \"-\" &&\n              source[i + 2] === \">\"\n            ) {\n              cache += \"-->\";\n              push();\n              i += 3;\n              break;\n            } else if (isNewLine()) {\n              cache && push();\n              handle(line);\n              cache = \"\";\n            } else {\n              cache += token;\n              i++;\n            }\n          }\n          continue;\n        }\n      }\n\n      handle(white);\n      token = source[i];\n\n      if (token === \"!\" || token === \"?\") {\n        handle(white);\n      } else if (token === \"/\") {\n        handle(white);\n        isEndTag = 1;\n      } else {\n        isEndTag = 0;\n      }\n\n      token = source[i];\n      if (isHtmlLetter()) {\n        // tag name\n        getHtmlWord();\n        if (isEndTag) {\n          matchTag = \"\";\n        } else {\n          matchTag = cache;\n        }\n        style = red;\n        push();\n        while ((token = source[i])) {\n          if (token === \">\") {\n            // tag end\n            handle(white);\n            if (matchTag === \"script\" || matchTag === \"style\") {\n              handleInnerTag();\n            }\n            break;\n          } else if (isSpace()) {\n            handleSpace();\n          } else if (token === '\"' || token === \"'\") {\n            // attribute value\n            style = yellow;\n            cache = match = token;\n            while ((token = source[++i])) {\n              if (token === match) {\n                cache += token;\n                i++;\n                push();\n                break;\n              } else {\n                cache += token;\n              }\n            }\n          } else if (isHtmlLetter() || isNumber()) {\n            // tag inner word\n            handleWord();\n          } else if (isPunctuation()) {\n            // for\n            handle(white);\n          } else if (isNewLine()) {\n            handle(line);\n          } else {\n            handle(\"fail\");\n          }\n        }\n      }\n    } else if (isNewLine()) {\n      handle(line);\n    } else if (isSpace()) {\n      handleSpace();\n    } else {\n      // inner html\n      style = white;\n      cache = token;\n      while (true) {\n        token = source[++i];\n        if (!token || isNewLine() || token === \"<\") {\n          push();\n          break;\n        } else {\n          cache += token;\n        }\n      }\n    }\n  }\n  return analysis;\n}\n\nfunction AnalysisForSourceCode() {\n  function isRegExp() {\n    var _i;\n    if (token === \"/\") {\n      _i = i;\n      while (true) {\n        token = source[--_i];\n        if (isSpace()) {\n          continue;\n        } else if (\n          token === \"=\" ||\n          token === \":\" ||\n          token === \"(\" ||\n          token === \"|\" ||\n          token === \"?\" ||\n          isNewLine() ||\n          !token\n        ) {\n          _i = i;\n          while ((token = source[++_i])) {\n            if (isNewLine() || !token) {\n              break;\n            } else if (token === \"\\\\\") {\n              _i++;\n              continue;\n            } else if (token === \"/\") {\n              return 1;\n            } else {\n              continue;\n            }\n          }\n          break;\n        } else {\n          break;\n        }\n      }\n    }\n  }\n\n  function handlePunctuation() {\n    if (token === \"/\" && source[i + 1] === \"*\") {\n      cache = \"/*\";\n      i += 2;\n\n      while (true) {\n        token = source[i];\n        if (!token) {\n          cache && push();\n          break;\n        } else if (token === \"*\" && source[i + 1] === \"/\") {\n          cache += \"*/\";\n          push();\n          i += 2;\n          break;\n        } else if (isNewLine()) {\n          style = dark;\n          cache && push();\n          handle(line);\n          cache = \"\";\n        } else {\n          cache += token;\n          i++;\n        }\n      }\n    } else if (token === \"/\" && source[i + 1] === \"/\") {\n      (cache = \"//\"), i++;\n      style = dark;\n      while (true) {\n        token = source[++i];\n        if (!token) {\n          push();\n          break;\n        } else if (isNewLine()) {\n          push();\n          cache = token;\n          style = line;\n          push();\n          break;\n        } else {\n          cache += token;\n        }\n      }\n      i++;\n    } else if (token === \"'\" || token === '\"') {\n      match = cache = token;\n      while (true) {\n        token = source[++i];\n        if (!token || isNewLine()) {\n          cache && push();\n          break;\n        } else if (token === \"\\\\\") {\n          style = yellow;\n          push();\n          cache = token + source[++i];\n          style = purple;\n          push();\n          cache = \"\";\n        } else if (token === match) {\n          cache += token;\n          style = yellow;\n          push();\n          break;\n        } else {\n          cache += token;\n        }\n      }\n      i++;\n    } else if (token === \"/\" || isLogistic()) {\n      match = isRegExp();\n      if (match === 1) {\n        cache = \"/\";\n        style = \"yellow hehe\";\n        push();\n        i++;\n        while (true) {\n          token = source[i];\n          if (!token || isNewLine()) {\n            cache && push();\n          } else if (token === \"\\\\\") {\n            style = purple;\n            cache = token + source[++i];\n            push();\n            i++;\n          } else if (token === \"/\") {\n            style = yellow;\n            cache = token;\n            push();\n            i++;\n            cache = \"\";\n            while ((token = source[i])) {\n              if (~\"gi\".indexOf(token)) {\n                style = red;\n                cache += token;\n                i++;\n              } else {\n                break;\n              }\n            }\n            cache && push();\n            break;\n          } else if (isLogistic()) {\n            handle(red);\n          } else if (isLetter()) {\n            style = yellow;\n            getWord();\n            push();\n            cache = \"\";\n          } else {\n            handle(yellow);\n          }\n        }\n      } else {\n        // logic\n        style = red;\n        cache = source[i];\n        while ((token = source[++i])) {\n          if (isLogistic()) {\n            cache += token;\n          } else {\n            push();\n            break;\n          }\n        }\n      }\n    } else {\n      handle(white);\n    }\n  }\n\n  function handleNumberAndHex() {\n    style = purple;\n    cache = token;\n    if (token === \"0\" && (source[i + 1] === \"x\" || source[i + 1] === \"X\")) {\n      // oxabc十六进制\n      cache += source[++i];\n      while (true) {\n        token = source[++i];\n        if (isHex()) {\n          cache += token;\n        } else {\n          push();\n          break;\n        }\n      }\n    } else {\n      hanldeNumber();\n    }\n  }\n\n  function handleFunction() {\n    var len = analysis.length - 1;\n    if (len > -1) {\n      token = analysis[len][0][0];\n      if (isSpace()) {\n        len--;\n        token = analysis[len][0][0];\n      }\n      if (token === \":\" || token === \"=\") {\n        len--;\n        token = analysis[len][0][0];\n        if (isSpace()) {\n          len--;\n          token = analysis[len][0][0];\n        }\n        if (isLetter()) {\n          analysis[len][1] = \"green\";\n        }\n      }\n    }\n    token = source[i];\n    cache = \"function\";\n    style = ryan + italic;\n    push();\n  }\n\n  while (true) {\n    token = source[i];\n    if (!token) {\n      break;\n    } else if (isSpace()) {\n      handleSpace();\n    } else if (isNewLine()) {\n      handle(line);\n    } else if (isNumber()) {\n      handleNumberAndHex();\n    } else if (isLetter()) {\n      getWord();\n      if (cache === \"function\") {\n        handleFunction();\n        if (isSpace()) {\n          handleSpace();\n        }\n        if (isLetter()) {\n          getWord();\n          style = green;\n          push();\n          if (isSpace()) {\n            handleSpace();\n          }\n        }\n        if (token === \"(\") {\n          handle(white);\n          while (true) {\n            token = source[i];\n            if (isSpace()) {\n              handleSpace();\n            } else if (token === \",\") {\n              handle(white);\n            } else if (isLetter()) {\n              getWord();\n              style = gold + italic;\n              push();\n            } else {\n              break;\n            }\n          }\n        }\n      } else {\n        if (isVariable()) {\n          style = ryan + italic;\n        } else if (isKeyword()) {\n          style = red;\n        } else if (isParameter()) {\n          style = gold + italic;\n        } else if (isNormal()) {\n          style = ryan;\n        } else if (isConstant()) {\n          style = purple;\n        } else {\n          style = white;\n\n          if (token === \"(\") {\n            style = ryan;\n          } else if (isSpace()) {\n            while (true) {\n              token = source[i + 1];\n              if (isSpace()) {\n                handleSpace();\n              } else if (token === \"(\") {\n                style = ryan;\n                break;\n              } else {\n                break;\n              }\n            }\n          }\n        }\n        push();\n      }\n    } else if (isPunctuation()) {\n      handlePunctuation();\n    } else {\n      handle(\"fail\");\n    }\n  }\n  return analysis;\n}\n\nfunction AnalysisFor(s, indent) {\n  source = s;\n  if (indent) {\n    var reg = new RegExp(\"^\\\\s{\" + indent + \"}\");\n    source = source\n      .split(/\\n|\\r|(?:\\r\\n)/)\n      .map(function (v) {\n        return v.replace(reg, \"\");\n      })\n      .join(\"\\n\");\n  }\n  (i = 0), (analysis = []);\n  return /^\\s*</.test(source)\n    ? AnalysisForMarkupCode()\n    : AnalysisForSourceCode();\n}\n\nfunction AnalysisForElement(script) {\n  if (!script.coded) {\n    script.coded = true;\n    var firstChild = script.firstChild;\n    if (firstChild) {\n      var codes = AnalysisFor(\n        firstChild.nodeValue.replace(/^\\s+|\\s+$/g, \"\"),\n        script.getAttribute(\"code\")\n      );\n      var ol = createElement(codes);\n      script.replaceChild(ol, firstChild);\n      script.style.display = \"block\";\n    }\n  }\n}\n\nfunction createElement(codes) {\n  var ol = document.createElement(\"ol\");\n  var li = document.createElement(\"li\");\n  var count = 0;\n  for (var x = 0, len = codes.length; x < len; x++) {\n    var code = codes[x];\n    var span = document.createElement(\"span\");\n    span.appendChild(document.createTextNode(code[0]));\n    span.className = code[1];\n    if (span.className === \"line\") {\n      ol.appendChild(li);\n      li = document.createElement(\"li\");\n      count++;\n    } else {\n      li.appendChild(span);\n    }\n  }\n  ol.style.paddingLeft = String(count).length / 2 + 1.3 + \"em\";\n  ol.appendChild(li);\n  return ol;\n}\n\nfunction AnalysisForTagName(tagname) {\n  var scripts = document.getElementsByTagName(tagname);\n  for (var k = 0, len = scripts.length; k < len; k++) {\n    var script = scripts[k];\n    script.hasAttribute(\"code\") && AnalysisForElement(script);\n  }\n}\n\nfunction code(element, indent) {\n  if (!element) {\n    AnalysisForTagName(\"xmp\");\n    AnalysisForTagName(\"script\");\n    AnalysisForTagName(\"pre\");\n  } else {\n    if (element instanceof Node) {\n      element.setAttribute(\"code\", \"\"), AnalysisForElement(element);\n    } else {\n      return AnalysisFor(element.toString(), indent);\n    }\n  }\n}\n\ncode.createElement = createElement;\n\nmodule.exports = code;\nconsole.log(code);\n"],"names":["token","style","cache","match","i","analysis","line","dark","white","purple","red","green","yellow","ryan","source","in_array","value","arr","x","len","length","push","isSpace","test","isNewLine","isHex","isNumber","isPunctuation","indexOf","isLetter","isHtmlLetter","isLogistic","keywords","split","variable","parameter","normal","getHex","getNumber","getWord","getHtmlWord","tagnames","cssKeys","cssValues","handle","handleSpace","AnalysisForMarkupCode","handleWord","handleInnerTag","endIndex","matchTag","preSource","substring","replace","AnalysisForCSSCode","AnalysisForSourceCode","isEndTag","handlePunctuation","_i","isRegExp","handleNumberAndHex","hanldeNumber","gold","AnalysisFor","s","indent","reg","RegExp","map","v","join","AnalysisForElement","script","coded","firstChild","ol","createElement","nodeValue","getAttribute","replaceChild","display","codes","document","li","count","code","span","appendChild","createTextNode","className","paddingLeft","String","AnalysisForTagName","tagname","scripts","getElementsByTagName","k","hasAttribute","element","Node","toString","setAttribute","src","console","log"],"mappings":"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"}