{"version":3,"file":"code.min.js","sources":["../src/parse/analysisForString.js","../src/analysis.js","../src/utils/domUtils.js","../src/index.js"],"sourcesContent":["\r\nconst space = \"space\"\r\nconst line = \"line\"\r\nconst dark = \"dark\"\r\nconst italic = \" i\"\r\nconst white = \"white\"\r\nconst purple = \"purple\"\r\nconst gold = \"gold\"\r\nconst red = \"red\"\r\nconst green = \"green\"\r\nconst yellow = \"yellow\"\r\nconst ryan = \"ryan\"\r\n\r\nlet source = \"\"\r\nlet token, style, cache, match, i, analysis\r\n\r\nfunction inArray(value, arr) {\r\n  for (let x = 0, len = arr.length; x < len; x++) {\r\n    if (arr[x] === value) {\r\n      return 1\r\n    }\r\n  }\r\n}\r\n\r\nfunction push(cache, style) {\r\n  analysis.push([cache, style])\r\n}\r\n\r\nfunction isSpace(token) {\r\n  return token && /[\\v\\t ]/.test(token)\r\n}\r\n\r\nfunction isNewLine(token) {\r\n  return token === \"\\n\" || token === \"\\r\"\r\n}\r\n\r\nfunction isHex(token) {\r\n  return token && /[0-9A-Fa-f]/.test(token)\r\n}\r\n\r\nfunction isNumber(token) {\r\n  return token && /[0-9]/.test(token)\r\n}\r\n\r\nfunction isPunctuation(token) {\r\n  return \"~`!@#$%^&*()-_+=[]{}\\\\;:'\\\"|,.<>/?\".indexOf(token) !== -1\r\n}\r\n\r\nfunction isLetter(token) {\r\n  return token && /[a-zA-Z_]/.test(token)\r\n}\r\n\r\nfunction isHtmlLetter() {\r\n  return isLetter(token) || token === \"-\"\r\n}\r\n\r\nfunction isLogistic(token) {\r\n  return \"$!+-=*%&|^<>\".indexOf(token) !== -1\r\n}\r\n\r\nconst keywords =\r\n  \"class,break,case,catch,const,continue,debugger,default,delete,do,else,extends,finally,for,if,import,in,instanceof,let,new,return,super,switch,throw,try,typeof,var,void,while,with\".split(\r\n    \",\",\r\n  )\r\n\r\nfunction isKeyword() {\r\n  return inArray(cache, keywords)\r\n}\r\n\r\nfunction isConstant() {\r\n  return inArray(cache, [\"null\", \"true\", \"false\", \"undefined\"])\r\n}\r\n\r\nconst variable = [\"var\", \"let\", \"const\"]\r\n\r\nfunction isVariable() {\r\n  return inArray(cache, variable)\r\n}\r\n\r\nconst parameter = [\"self\", \"this\", \"argument\"]\r\n\r\nfunction isParameter() {\r\n  return inArray(cache, parameter)\r\n}\r\n\r\nconst normal = [\r\n  \"prototype\",\r\n  \"module\",\r\n  \"window\",\r\n  \"document\",\r\n  \"history\",\r\n  \"location\",\r\n  \"screen\",\r\n  \"console\",\r\n  \"Object\",\r\n  \"Array\",\r\n  \"Number\",\r\n  \"Boolean\",\r\n  \"String\",\r\n  \"RegExp\",\r\n  \"Math\",\r\n]\r\n\r\nfunction isNormal() {\r\n  return inArray(cache, normal)\r\n}\r\n\r\nfunction getHex() {\r\n  style = purple\r\n  cache = token\r\n  while (true) {\r\n    token = source[++i]\r\n    if (isHex(token)) {\r\n      cache += token\r\n    } else {\r\n      break\r\n    }\r\n  }\r\n}\r\n\r\nfunction getNumber() {\r\n  cache = token\r\n  while (true) {\r\n    token = source[++i]\r\n    if (isNumber(token)) {\r\n      cache += token\r\n    } else if (token === \".\") {\r\n      cache += token\r\n      while (true) {\r\n        token = source[++i]\r\n        if (isNumber(token)) {\r\n          cache += token\r\n        } else {\r\n          break\r\n        }\r\n      }\r\n      break\r\n    } else {\r\n      break\r\n    }\r\n  }\r\n}\r\n\r\nfunction getWord() {\r\n  cache = token\r\n  while (true) {\r\n    token = source[++i]\r\n    if (isLetter(token) || isNumber(token)) {\r\n      cache += token\r\n    } else {\r\n      break\r\n    }\r\n  }\r\n}\r\n\r\nfunction getHtmlWord() {\r\n  cache = token\r\n  while (true) {\r\n    token = source[++i]\r\n    if (isHtmlLetter() || isNumber(token)) {\r\n      cache += token\r\n    } else {\r\n      break\r\n    }\r\n  }\r\n}\r\n\r\nconst tagnames =\r\n  \"a,abbr,address,area,article,aside,audio,b,base,bdi,bdo,big,blockquote,body,br,button,canvas,caption,center,cite,code,datalist,dd,del,details,dfn,dialog,dir,div,dl,dt,em,embed,fieldset,figcaption,figure,font,footer,form,frame,frameset,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,i,iframe,img,input,ins,kbd,keygen,label,legend,li,link,main,map,mark,nav,object,ol,optgroup,option,p,pre,progress,q,s,samp,script,section,select,small,span,strong,sub,summary,sup,table,tbody,td,textarea,tfoot,th,thead,tr,u,ul,video\".split(\r\n    \",\",\r\n  )\r\n\r\nfunction isTargetName() {\r\n  return inArray(cache, tagnames)\r\n}\r\n\r\nconst cssKeys =\r\n  \"align-content,align-items,align-self,alignment-baseline,all,animation,animation-delay,animation-direction,animation-duration,animation-fill-mode,animation-iteration-count,animation-name,animation-play-state,animation-timing-function,backface-visibility,background,background-attachment,background-blend-mode,background-clip,background-color,background-image,background-origin,background-position,background-position-x,background-position-y,background-repeat,background-repeat-x,background-repeat-y,background-size,baseline-shift,border,border-bottom,border-bottom-color,border-bottom-left-radius,border-bottom-right-radius,border-bottom-style,border-bottom-width,border-collapse,border-color,border-image,border-image-outset,border-image-repeat,border-image-slice,border-image-source,border-image-width,border-left,border-left-color,border-left-style,border-left-width,border-radius,border-right,border-right-color,border-right-style,border-right-width,border-spacing,border-style,border-top,border-top-color,border-top-left-radius,border-top-right-radius,border-top-style,border-top-width,border-width,bottom,box-shadow,box-sizing,break-after,break-before,break-inside,buffered-rendering,caption-side,clear,clip,clip-path,clip-rule,color,color-interpolation,color-interpolation-filters,color-rendering,column-count,column-fill,column-gap,column-rule,column-rule-color,column-rule-style,column-rule-width,column-span,column-width,columns,contain,content,counter-increment,counter-reset,cursor,cx,cy,d,direction,display,dominant-baseline,empty-cells,fill,fill-opacity,fill-rule,filter,flex,flex-basis,flex-direction,flex-flow,flex-grow,flex-shrink,flex-wrap,float,flood-color,flood-opacity,font,font-family,font-feature-settings,font-kerning,font-size,font-stretch,font-style,font-variant,font-variant-caps,font-variant-ligatures,font-variant-numeric,font-weight,height,hyphens,image-rendering,isolation,justify-content,left,letter-spacing,lighting-color,line-height,list-style,list-style-image,list-style-position,list-style-type,margin,margin-bottom,margin-left,margin-right,margin-top,marker,marker-end,marker-mid,marker-start,mask,mask-type,max-height,max-width,max-zoom,min-height,min-width,min-zoom,mix-blend-mode,motion,object-fit,object-position,offset,offset-distance,offset-path,offset-rotation,opacity,order,orientation,orphans,outline,outline-color,outline-offset,outline-style,outline-width,overflow,overflow-wrap,overflow-x,overflow-y,padding,padding-bottom,padding-left,padding-right,padding-top,page,page-break-after,page-break-before,page-break-inside,paint-order,perspective,perspective-origin,pointer-events,position,quotes,r,resize,right,rx,ry,shape-image-threshold,shape-margin,shape-outside,shape-rendering,size,speak,src,stop-color,stop-opacity,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,tab-size,table-layout,text-align,text-align-last,text-anchor,text-combine-upright,text-decoration,text-indent,text-orientation,text-overflow,text-rendering,text-shadow,text-size-adjust,text-transform,top,touch-action,transform,transform-origin,transform-style,transition,transition-delay,transition-duration,transition-property,transition-timing-function,unicode-bidi,unicode-range,user-select,user-zoom,vector-effect,vertical-align,visibility,webkit-app-region,webkit-appearance,webkit-background-clip,webkit-background-origin,webkit-border-after,webkit-border-after-color,webkit-border-after-style,webkit-border-after-width,webkit-border-before,webkit-border-before-color,webkit-border-before-style,webkit-border-before-width,webkit-border-end,webkit-border-end-color,webkit-border-end-style,webkit-border-end-width,webkit-border-horizontal-spacing,webkit-border-image,webkit-border-start,webkit-border-start-color,webkit-border-start-style,webkit-border-start-width,webkit-border-vertical-spacing,webkit-box-align,webkit-box-decoration-break,webkit-box-direction,webkit-box-flex,webkit-box-flex-group,webkit-box-lines,webkit-box-ordinal-group,webkit-box-orient,webkit-box-pack,webkit-box-reflect,webkit-column-break-after,webkit-column-break-before,webkit-column-break-inside,webkit-font-size-delta,webkit-font-smoothing,webkit-highlight,webkit-hyphenate-character,webkit-line-break,webkit-line-clamp,webkit-locale,webkit-logical-height,webkit-logical-width,webkit-margin-after,webkit-margin-after-collapse,webkit-margin-before,webkit-margin-before-collapse,webkit-margin-bottom-collapse,webkit-margin-collapse,webkit-margin-end,webkit-margin-start,webkit-margin-top-collapse,webkit-mask,webkit-mask-box-image,webkit-mask-box-image-outset,webkit-mask-box-image-repeat,webkit-mask-box-image-slice,webkit-mask-box-image-source,webkit-mask-box-image-width,webkit-mask-clip,webkit-mask-composite,webkit-mask-image,webkit-mask-origin,webkit-mask-position,webkit-mask-position-x,webkit-mask-position-y,webkit-mask-repeat,webkit-mask-repeat-x,webkit-mask-repeat-y,webkit-mask-size,webkit-max-logical-height,webkit-max-logical-width,webkit-min-logical-height,webkit-min-logical-width,webkit-padding-after,webkit-padding-before,webkit-padding-end,webkit-padding-start,webkit-perspective-origin-x,webkit-perspective-origin-y,webkit-print-color-adjust,webkit-rtl-ordering,webkit-ruby-position,webkit-tap-highlight-color,webkit-text-combine,webkit-text-decorations-in-effect,webkit-text-emphasis,webkit-text-emphasis-color,webkit-text-emphasis-position,webkit-text-emphasis-style,webkit-text-fill-color,webkit-text-orientation,webkit-text-security,webkit-text-stroke,webkit-text-stroke-color,webkit-text-stroke-width,webkit-transform-origin-x,webkit-transform-origin-y,webkit-transform-origin-z,webkit-user-drag,webkit-user-modify,webkit-writing-mode,white-space,widows,width,will-change,word-break,word-spacing,word-wrap,writing-mode,x,y,z-index,zoom\".split(\r\n    \",\",\r\n  )\r\n\r\nfunction isCssKey() {\r\n  return inArray(cache.replace(/^-(webkit|moz|ms|o)-/, \"\"), cssKeys)\r\n}\r\n\r\nconst cssValues =\r\n  \"red,blue,yellow,green,lime,content-box,border-box,translateX,translateY,translateZ,url,rgba,rgb,whitespace,wait,w-resize,visible,vertical-text,vertical-ideographic,uppercase,upper-roman,upper-alpha,underline,transparent,top,thin,thick,text,text-top,text-bottom,tb-rl,table-header-group,table-footer-group,sw-resize,super,strict,static,square,solid,small-caps,separate,se-resize,scroll,s-resize,rtl,row-resize,ridge,right,repeat,repeat-y,repeat-x,relative,progress,pointer,overline,outside,outset,oblique,nowrap,not-allowed,normal,none,nw-resize,no-repeat,no-drop,newspaper,ne-resize,n-resize,move,middle,medium,ltr,lr-tb,lowercase,lower-roman,lower-alpha,loose,list-item,line,line-through,line-edge,lighter,left,keep-all,justify,italic,inter-word,inter-ideograph,inside,inset,inline,inline-block,inherit,inactive,ideograph-space,ideograph-parenthesis,ideogwhitespace,wait,w-resize,visible,vertical-text,vertical-ideographic,uppercase,upper-roman,upper-alpha,underline,transparent,top,thin,thick,text,text-top,text-bottom,tb-rl,table-header-group,table-footer-group,sw-resize,super,strict,static,square,solid,small-caps,separate,se-resize,scroll,s-resize,rtl,row-resize,ridge,right,repeat,repeat-y,repeat-x,relative,progress,pointer,overline,outside,outset,oblique,nowrap,not-allowed,normal,none,nw-resize,no-repeat,no-drop,newspaper,ne-resize,n-resize,move,middle,medium,ltr,lr-tb,lowercase,lower-roman,lower-alpha,loose,list-item,line,line-through,line-edge,lighter,left,keep-all,justify,italic,inter-word,inter-ideograph,inside,inset,inline,inline-block,inherit,inactive,ideograph-space,ideograph-parenthesis,ideograph-numeric,ideograph-alpha,horizontal,hidden,help,hand,groove,fixed,ellipsis,e-resize,double,dotted,distribute,distribute-space,distribute-letter,distribute-all-lines,disc,disabled,default,decimal,dashed,crosshair,collapse,col-resize,circle,char,center,capitalize,break-word,break-all,bottom,both,bolder,bold,block,bidi-override,below,baseline,auto,always,all-scroll,absolute,table,table-cell-all,bottom,both,bolder,bold,block,bidi-override,below,baseline,auto,always,all-scroll,absolute,table,table-cell,table-row\".split(\r\n    \",\",\r\n  )\r\n\r\nfunction isCssValue() {\r\n  return inArray(cache.replace(/^-(webkit|moz|ms|o)-/, \"\"), cssValues)\r\n}\r\n\r\nfunction handle(style) {\r\n  analysis.push([token, style])\r\n  i++\r\n}\r\n\r\nfunction handleSpace() {\r\n  style = space\r\n  cache = token\r\n  while (true) {\r\n    token = source[++i]\r\n    if (isSpace(token)) {\r\n      cache += token\r\n    } else {\r\n      push(cache, style)\r\n      break\r\n    }\r\n  }\r\n}\r\n\r\nfunction hanldeNumber() {\r\n  style = purple\r\n  cache = token\r\n  while (true) {\r\n    token = source[++i]\r\n    if (isNumber(token)) {\r\n      cache += token\r\n    } else {\r\n      push(cache, style)\r\n      break\r\n    }\r\n  }\r\n}\r\n\r\nfunction analysisForCSSCode() {\r\n  while (true) {\r\n    token = source[i]\r\n    if (!token) {\r\n      break\r\n    } else if (token === \"/\" && source[i + 1] === \"*\") {\r\n      cache = \"/*\"\r\n      i += 2\r\n\r\n      while (true) {\r\n        token = source[i]\r\n        if (!token) {\r\n          cache && push(cache, style)\r\n          break\r\n        } else if (token === \"*\" && source[i + 1] === \"/\") {\r\n          cache += \"*/\"\r\n          push(cache, style)\r\n          i += 2\r\n          break\r\n        } else if (isNewLine(token)) {\r\n          style = dark\r\n          cache && push(cache, style)\r\n          handle(line)\r\n          cache = \"\"\r\n        } else {\r\n          cache += token\r\n          i++\r\n        }\r\n      }\r\n    } else if (token === \".\" || token === \"#\") {\r\n      match = token\r\n      i++\r\n      token = source[i]\r\n      if (isHtmlLetter()) {\r\n        getHtmlWord()\r\n        style = green\r\n        cache = match + cache\r\n        push(cache, style)\r\n      } else {\r\n        style = white\r\n        cache = match\r\n        push(cache, style)\r\n      }\r\n    } else if (token === \"[\") {\r\n      handle(white)\r\n      while (true) {\r\n        token = source[i]\r\n        if (!token || isNewLine(token)) {\r\n          break\r\n        } else if (token === \"]\") {\r\n          handle(white)\r\n          break\r\n        } else if (isHtmlLetter()) {\r\n          getHtmlWord()\r\n          style = green\r\n          push(cache, style)\r\n        } else if (isSpace(token)) {\r\n          handleSpace()\r\n        } else if (token === \"=\") {\r\n          handle(red)\r\n          while (true) {\r\n            token = source[i]\r\n            if (!token || isNewLine(token) || token === \"]\") {\r\n              break\r\n            } else if (isSpace(token)) {\r\n              handleSpace()\r\n            } else if (token === '\"' || token === \"'\") {\r\n              match = cache = token\r\n              style = yellow\r\n              i++\r\n              while (true) {\r\n                token = source[i]\r\n                if (!token || isNewLine(token)) {\r\n                  cache && push(cache, style)\r\n                  break\r\n                } else if (token === match) {\r\n                  cache += token\r\n                  push(cache, style)\r\n                  i++\r\n                  break\r\n                } else {\r\n                  cache += token\r\n                  i++\r\n                }\r\n              }\r\n            } else if (isHtmlLetter()) {\r\n              getHtmlWord()\r\n              style = yellow\r\n              push(cache, style)\r\n            } else {\r\n              handle(white)\r\n            }\r\n          }\r\n        } else {\r\n          cache = token\r\n          style = white\r\n          push(cache, style)\r\n          i++\r\n        }\r\n      }\r\n    } else if (isNewLine(token)) {\r\n      handle(line)\r\n    } else if (token === \":\") {\r\n      handle(white)\r\n      while (true) {\r\n        token = source[i]\r\n        if (!token) {\r\n          break\r\n        } else if (isSpace(token)) {\r\n          handleSpace()\r\n        } else if (isNewLine(token)) {\r\n          handle(line)\r\n          break\r\n        } else if (isNumber(token) || token === \".\") {\r\n          getNumber()\r\n          style = purple\r\n          push(cache, style)\r\n          // hanldeNumber();\r\n          // px em %\r\n          if (token === \"%\") {\r\n            handle(red)\r\n          } else if (token === \"s\") {\r\n            handle(red)\r\n          } else if (token === \"p\" && source[i + 1] === \"x\") {\r\n            cache = \"px\"\r\n            style = red\r\n            push(cache, style)\r\n            i += 2\r\n          } else if (token === \"e\" && source[i + 1] === \"m\") {\r\n            cache = \"em\"\r\n            style = red\r\n            push(cache, style)\r\n            i += 2\r\n          } else if (token === \"c\" && source[i + 1] === \"m\") {\r\n            cache = \"cm\"\r\n            style = red\r\n            push(cache, style)\r\n            i += 2\r\n          }\r\n        } else if (isHtmlLetter()) {\r\n          if (token === \"-\") {\r\n            token = source[i + 1]\r\n            if (isNumber(token) || token === \".\") {\r\n              token = \"-\"\r\n              handle(purple)\r\n              continue\r\n            } else {\r\n              token = \"-\"\r\n            }\r\n          }\r\n          getHtmlWord()\r\n          if (isCssValue()) {\r\n            style = ryan\r\n            push(cache, style)\r\n          } else if (cache === \"important\") {\r\n            style = red\r\n            push(cache, style)\r\n          } else {\r\n            style = white\r\n            push(cache, style)\r\n          }\r\n        } else if (token === \";\") {\r\n          handle(white)\r\n          break\r\n        } else if (token === \"#\") {\r\n          cache = match = token\r\n          i++\r\n          token = source[i]\r\n          if (isHex(token)) {\r\n            getHex()\r\n            cache = match + cache\r\n            style = purple\r\n            push(cache, style)\r\n          } else {\r\n            style = white\r\n            push(cache, style)\r\n            i++\r\n          }\r\n        } else if (token === \"#\") {\r\n          cache = match = token\r\n          i++\r\n          token = source[i]\r\n          if (isHex(token)) {\r\n            getHex()\r\n            cache = match + cache\r\n            style = purple\r\n            push(cache, style)\r\n          } else {\r\n            style = white\r\n            push(cache, style)\r\n            i++\r\n          }\r\n        } else if (token === \"!\") {\r\n          handle(red)\r\n        } else {\r\n          // ( ) ,\r\n          handle(white)\r\n        }\r\n      }\r\n    } else if (isSpace(token)) {\r\n      handleSpace()\r\n    } else if (isHtmlLetter()) {\r\n      getHtmlWord()\r\n      if (isTargetName()) {\r\n        style = red\r\n        push(cache, style)\r\n      } else if (isCssKey()) {\r\n        style = ryan + italic\r\n        push(cache, style)\r\n      } else {\r\n        style = white\r\n        push(cache, style)\r\n      }\r\n    } else if (token === \"*\") {\r\n      handle(red)\r\n    } else if (token === \"-\") {\r\n      handle(purple)\r\n    } else if (token === \"@\") {\r\n      cache = token\r\n      style = red\r\n      i++\r\n      while (true) {\r\n        token = source[i]\r\n        if (!token || isNewLine(token)) {\r\n          cache && push(cache, style)\r\n          break\r\n        } else if (token === \"{\") {\r\n          push(cache, style)\r\n          break\r\n        } else {\r\n          cache += token\r\n          i++\r\n        }\r\n      }\r\n    } else {\r\n      handle(white)\r\n    }\r\n  }\r\n\r\n  return analysis\r\n}\r\n\r\nfunction analysisForMarkupCode() {\r\n  function handleWord() {\r\n    // tag attribute (name) = value\r\n    style = green\r\n    cache = token\r\n    while ((token = source[++i])) {\r\n      if (isHtmlLetter() || isNumber(token)) {\r\n        cache += token\r\n      } else {\r\n        push(cache, style)\r\n        break\r\n      }\r\n    }\r\n\r\n    while (true) {\r\n      token = source[i]\r\n      if (isNewLine(token)) {\r\n        handle(line)\r\n      } else if (isSpace(token)) {\r\n        handleSpace()\r\n      } else {\r\n        break\r\n      }\r\n    }\r\n\r\n    if (token === \"=\") {\r\n      cache = token\r\n      // tag attribute name (=) value\r\n      style = white\r\n      i++\r\n      push(cache, style)\r\n\r\n      if (isSpace(token)) {\r\n        handleSpace()\r\n      }\r\n      token = source[i]\r\n      if (token === '\"' || token === \"'\") {\r\n        // attribute value\r\n        style = yellow\r\n        match = cache = token\r\n        while ((token = source[++i])) {\r\n          if (token === match) {\r\n            cache += token\r\n            push(cache, style)\r\n            i++\r\n            break\r\n          } else if (isNewLine(token)) {\r\n            push(cache, style)\r\n            style = line\r\n            cache = token\r\n            i++\r\n            push(cache, style)\r\n          } else {\r\n            cache += token\r\n          }\r\n        }\r\n      } else {\r\n        if (!(!token || isNewLine(token) || token === \">\")) {\r\n          style = yellow\r\n          cache = token\r\n          while (true) {\r\n            token = source[++i]\r\n            if (!token || isNewLine(token) || token === \">\" || token === \" \") {\r\n              push(cache, style)\r\n              break\r\n            } else {\r\n              cache += token\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function handleInnerTag() {\r\n    const endIndex = source.indexOf(\"</\" + matchTag + \">\", i)\r\n    if (endIndex !== -1 && endIndex > i) {\r\n      const preSource = source\r\n      source = source.substring(i, endIndex)\r\n      i = 0\r\n      if (matchTag === \"style\") {\r\n        analysisForCSSCode()\r\n      } else {\r\n        analysisForSourceCode()\r\n      }\r\n      source = preSource\r\n      i = endIndex\r\n    }\r\n  }\r\n\r\n  let matchTag = \"\"\r\n  let isEndTag = 0\r\n  while (true) {\r\n    token = source[i]\r\n    if (!token) {\r\n      break\r\n    } else if (token === \"<\") {\r\n      if (source[i + 1] === \"!\") {\r\n        if (source[i + 2] === \"-\" && source[i + 3] === \"-\") {\r\n          cache = \"<!--\"\r\n          style = dark\r\n          i += 4\r\n          while (true) {\r\n            token = source[i]\r\n            if (!token) {\r\n              cache && push(cache, style)\r\n            } else if (\r\n              token === \"-\" &&\r\n              source[i + 1] === \"-\" &&\r\n              source[i + 2] === \">\"\r\n            ) {\r\n              cache += \"-->\"\r\n              push(cache, style)\r\n              i += 3\r\n              break\r\n            } else if (isNewLine(token)) {\r\n              cache && push(cache, style)\r\n              handle(line)\r\n              cache = \"\"\r\n            } else {\r\n              cache += token\r\n              i++\r\n            }\r\n          }\r\n          continue\r\n        }\r\n      }\r\n\r\n      handle(white)\r\n      token = source[i]\r\n\r\n      if (token === \"!\" || token === \"?\") {\r\n        handle(white)\r\n      } else if (token === \"/\") {\r\n        handle(white)\r\n        isEndTag = 1\r\n      } else {\r\n        isEndTag = 0\r\n      }\r\n\r\n      token = source[i]\r\n      if (isHtmlLetter()) {\r\n        // tag name\r\n        getHtmlWord()\r\n        if (isEndTag) {\r\n          matchTag = \"\"\r\n        } else {\r\n          matchTag = cache\r\n        }\r\n        style = red\r\n        push(cache, style)\r\n        while ((token = source[i])) {\r\n          if (token === \">\") {\r\n            // tag end\r\n            handle(white)\r\n            if (matchTag === \"script\" || matchTag === \"style\") {\r\n              handleInnerTag()\r\n            }\r\n            break\r\n          } else if (isSpace(token)) {\r\n            handleSpace()\r\n          } else if (token === '\"' || token === \"'\") {\r\n            // attribute value\r\n            style = yellow\r\n            cache = match = token\r\n            while ((token = source[++i])) {\r\n              if (token === match) {\r\n                cache += token\r\n                i++\r\n                push(cache, style)\r\n                break\r\n              } else {\r\n                cache += token\r\n              }\r\n            }\r\n          } else if (isHtmlLetter() || isNumber(token)) {\r\n            // tag inner word\r\n            handleWord()\r\n          } else if (isPunctuation(token)) {\r\n            // for\r\n            handle(white)\r\n          } else if (isNewLine(token)) {\r\n            handle(line)\r\n          } else {\r\n            handle(\"fail\")\r\n          }\r\n        }\r\n      }\r\n    } else if (isNewLine(token)) {\r\n      handle(line)\r\n    } else if (isSpace(token)) {\r\n      handleSpace()\r\n    } else {\r\n      // inner html\r\n      style = white\r\n      cache = token\r\n      while (true) {\r\n        token = source[++i]\r\n        if (!token || isNewLine(token) || token === \"<\") {\r\n          push(cache, style)\r\n          break\r\n        } else {\r\n          cache += token\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return analysis\r\n}\r\n\r\nfunction analysisForSourceCode() {\r\n  function isRegExp() {\r\n    let _i\r\n    if (token === \"/\") {\r\n      _i = i\r\n      while (true) {\r\n        token = source[--_i]\r\n        if (isSpace(token)) {\r\n          continue\r\n        } else if (\r\n          token === \"=\" ||\r\n          token === \":\" ||\r\n          token === \"(\" ||\r\n          token === \"|\" ||\r\n          token === \"?\" ||\r\n          isNewLine(token) ||\r\n          !token\r\n        ) {\r\n          _i = i\r\n          while ((token = source[++_i])) {\r\n            if (isNewLine(token) || !token) {\r\n              break\r\n            } else if (token === \"\\\\\") {\r\n              _i++\r\n              continue\r\n            } else if (token === \"/\") {\r\n              return 1\r\n            } else {\r\n              continue\r\n            }\r\n          }\r\n          break\r\n        } else {\r\n          break\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function handlePunctuation() {\r\n    if (token === \"/\" && source[i + 1] === \"*\") {\r\n      cache = \"/*\"\r\n      i += 2\r\n\r\n      while (true) {\r\n        token = source[i]\r\n        if (!token) {\r\n          cache && push(cache, style)\r\n          break\r\n        } else if (token === \"*\" && source[i + 1] === \"/\") {\r\n          cache += \"*/\"\r\n          push(cache, style)\r\n          i += 2\r\n          break\r\n        } else if (isNewLine(token)) {\r\n          style = dark\r\n          cache && push(cache, style)\r\n          handle(line)\r\n          cache = \"\"\r\n        } else {\r\n          cache += token\r\n          i++\r\n        }\r\n      }\r\n    } else if (token === \"/\" && source[i + 1] === \"/\") {\r\n      (cache = \"//\")\r\n      i++\r\n      style = dark\r\n      while (true) {\r\n        token = source[++i]\r\n        if (!token) {\r\n          push(cache, style)\r\n          break\r\n        } else if (isNewLine(token)) {\r\n          push(cache, style)\r\n          cache = token\r\n          style = line\r\n          push(cache, style)\r\n          break\r\n        } else {\r\n          cache += token\r\n        }\r\n      }\r\n      i++\r\n    } else if (token === \"'\" || token === '\"') {\r\n      match = cache = token\r\n      while (true) {\r\n        token = source[++i]\r\n        if (!token || isNewLine(token)) {\r\n          cache && push(cache, style)\r\n          break\r\n        } else if (token === \"\\\\\") {\r\n          style = yellow\r\n          push(cache, style)\r\n          cache = token + source[++i]\r\n          style = purple\r\n          push(cache, style)\r\n          cache = \"\"\r\n        } else if (token === match) {\r\n          cache += token\r\n          style = yellow\r\n          push(cache, style)\r\n          break\r\n        } else {\r\n          cache += token\r\n        }\r\n      }\r\n      i++\r\n    } else if (token === \"/\" || isLogistic(token)) {\r\n      match = isRegExp()\r\n      if (match === 1) {\r\n        cache = \"/\"\r\n        style = \"yellow hehe\"\r\n        push(cache, style)\r\n        i++\r\n        while (true) {\r\n          token = source[i]\r\n          if (!token || isNewLine(token)) {\r\n            cache && push(cache, style)\r\n          } else if (token === \"\\\\\") {\r\n            style = purple\r\n            cache = token + source[++i]\r\n            push(cache, style)\r\n            i++\r\n          } else if (token === \"/\") {\r\n            style = yellow\r\n            cache = token\r\n            push(cache, style)\r\n            i++\r\n            cache = \"\"\r\n            while ((token = source[i])) {\r\n              if (~\"gi\".indexOf(token)) {\r\n                style = red\r\n                cache += token\r\n                i++\r\n              } else {\r\n                break\r\n              }\r\n            }\r\n            cache && push(cache, style)\r\n            break\r\n          } else if (isLogistic(token)) {\r\n            handle(red)\r\n          } else if (isLetter(token)) {\r\n            style = yellow\r\n            getWord()\r\n            push(cache, style)\r\n            cache = \"\"\r\n          } else {\r\n            handle(yellow)\r\n          }\r\n        }\r\n      } else {\r\n        // logic\r\n        style = red\r\n        cache = source[i]\r\n        while ((token = source[++i])) {\r\n          if (isLogistic(token)) {\r\n            cache += token\r\n          } else {\r\n            push(cache, style)\r\n            break\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      handle(white)\r\n    }\r\n  }\r\n\r\n  function handleNumberAndHex() {\r\n    style = purple\r\n    cache = token\r\n    if (token === \"0\" && (source[i + 1] === \"x\" || source[i + 1] === \"X\")) {\r\n      // oxabc十六进制\r\n      cache += source[++i]\r\n      while (true) {\r\n        token = source[++i]\r\n        if (isHex(token)) {\r\n          cache += token\r\n        } else {\r\n          push(cache, style)\r\n          break\r\n        }\r\n      }\r\n    } else {\r\n      hanldeNumber()\r\n    }\r\n  }\r\n\r\n  function handleFunction() {\r\n    let len = analysis.length - 1\r\n    if (len > -1) {\r\n      token = analysis[len][0][0]\r\n      if (isSpace(token)) {\r\n        len--\r\n        token = analysis[len][0][0]\r\n      }\r\n      if (token === \":\" || token === \"=\") {\r\n        len--\r\n        token = analysis[len][0][0]\r\n        if (isSpace(token)) {\r\n          len--\r\n          token = analysis[len][0][0]\r\n        }\r\n        if (isLetter(token)) {\r\n          analysis[len][1] = \"green\"\r\n        }\r\n      }\r\n    }\r\n    token = source[i]\r\n    cache = \"function\"\r\n    style = ryan + italic\r\n    push(cache, style)\r\n  }\r\n\r\n  while (true) {\r\n    token = source[i]\r\n    if (!token) {\r\n      break\r\n    } else if (isSpace(token)) {\r\n      handleSpace()\r\n    } else if (isNewLine(token)) {\r\n      handle(line)\r\n    } else if (isNumber(token)) {\r\n      handleNumberAndHex()\r\n    } else if (isLetter(token)) {\r\n      getWord()\r\n      if (cache === \"function\") {\r\n        handleFunction()\r\n        if (isSpace(token)) {\r\n          handleSpace()\r\n        }\r\n        if (isLetter(token)) {\r\n          getWord()\r\n          style = green\r\n          push(cache, style)\r\n          if (isSpace(token)) {\r\n            handleSpace()\r\n          }\r\n        }\r\n        if (token === \"(\") {\r\n          handle(white)\r\n          while (true) {\r\n            token = source[i]\r\n            if (isSpace(token)) {\r\n              handleSpace()\r\n            } else if (token === \",\") {\r\n              handle(white)\r\n            } else if (isLetter(token)) {\r\n              getWord()\r\n              style = gold + italic\r\n              push(cache, style)\r\n            } else {\r\n              break\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        if (isVariable()) {\r\n          style = ryan + italic\r\n        } else if (isKeyword()) {\r\n          style = red\r\n        } else if (isParameter()) {\r\n          style = gold + italic\r\n        } else if (isNormal()) {\r\n          style = ryan\r\n        } else if (isConstant()) {\r\n          style = purple\r\n        } else {\r\n          style = white\r\n\r\n          if (token === \"(\") {\r\n            style = ryan\r\n          } else if (isSpace(token)) {\r\n            while (true) {\r\n              token = source[i + 1]\r\n              if (isSpace(token)) {\r\n                handleSpace()\r\n              } else if (token === \"(\") {\r\n                style = ryan\r\n                break\r\n              } else {\r\n                break\r\n              }\r\n            }\r\n          }\r\n        }\r\n        push(cache, style)\r\n      }\r\n    } else if (isPunctuation(token)) {\r\n      handlePunctuation()\r\n    } else {\r\n      handle(\"fail\")\r\n    }\r\n  }\r\n  return analysis\r\n}\r\n\r\nexport function analysisForString(s, indent) {\r\n  source = s\r\n  if (indent) {\r\n    const reg = new RegExp(\"^\\\\s{\" + indent + \"}\")\r\n    source = source\r\n      .split(/\\n|\\r|(?:\\r\\n)/)\r\n      .map(function (v) {\r\n        return v.replace(reg, \"\")\r\n      })\r\n      .join(\"\\n\")\r\n  }\r\n  i = 0\r\n  analysis = []\r\n  const lan = /^\\s*</.test(source) ? \"html\" : \"js\"\r\n  const ast = lan === 'html' ? analysisForMarkupCode() : analysisForSourceCode()\r\n  return {\r\n    ast,\r\n    lan\r\n  }\r\n}\r\n","// src/utils/analysis.js\r\nimport { analysisForMarkupCode } from './parse/markupAnalysis.js';\r\nimport { analysisForSourceCode } from './parse/sourceAnalysis.js';\r\nimport { analysisForString } from './parse/analysisForString.js';\r\nimport { createElement, createHtml } from './utils/domUtils.js';\r\n\r\n// export function analysisForString(source, indent) {\r\n// \tif (indent) {\r\n// \t\tconst reg = new RegExp('^\\\\s{' + indent + '}');\r\n// \t\tsource = source\r\n// \t\t\t.split(/\\n|\\r|(?:\\r\\n)/)\r\n// \t\t\t.map((v) => v.replace(reg, ''))\r\n// \t\t\t.join('\\n');\r\n// \t}\r\n// \tsource = source.trim()\r\n// \tlet i = 0;\r\n// \tconst analysis = [];\r\n// \tconsole.log('analysisForString', source);\r\n\r\n// \treturn /^\\s*</.test(source) ? analysisForMarkupCode(source, i, analysis) : analysisForSourceCode(source, i, analysis);\r\n// }\r\n\r\nexport { analysisForString }\r\n\r\nexport function analysisForElement(element) {\r\n\tif (!element.codes) {\r\n\t\tconst firstChild = element.firstChild;\r\n\t\tif (firstChild) {\r\n\t\t\tconst { ast, lan } = analysisForString(firstChild.nodeValue.replace(/^\\s+|\\s+$/g, ''), element.getAttribute('code'));\r\n\t\t\telement.codes = ast;\r\n\t\t\telement.setAttribute('code', lan);\r\n\t\t\tconst ol = createElement(ast);\r\n\t\t\telement.replaceChild(ol, firstChild);\r\n\t\t} else {\r\n\t\t\tconst { ast, lan } = analysisForString(element.innerText + '', element.getAttribute('code'));\r\n\t\t\telement.codes = ast;\r\n\t\t\telement.setAttribute('code', lan);\r\n\t\t\tconst ol = createHtml(ast);\r\n\t\t\telement.innerHTML = ol;\r\n\t\t}\r\n\t\tif (getComputedStyle(element).getPropertyValue('display') === 'none') {\r\n\t\t\telement.style.display = 'block';\r\n\t\t}\r\n\r\n\t}\r\n\treturn element;\r\n}\r\n\r\nexport function analysisForTagName(tagname) {\r\n\tconst elements = document.getElementsByTagName(tagname)\r\n\tfor (let k = 0, len = elements.length; k < len; k++) {\r\n\t\tconst script = elements[k]\r\n\t\tif (script.src) {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tanalysisForElement(script)\r\n\t}\r\n\treturn elements;\r\n}\r\n","// src/utils/domUtils.js\r\nexport function createElement(codes) {\r\n\tconst ol = document.createElement('ol');\r\n\tlet li = document.createElement('li');\r\n\tlet count = 0;\r\n\tfor (let x = 0, len = codes.length; x < len; x++) {\r\n\t\tconst code = codes[x];\r\n\t\tconst span = document.createElement('span');\r\n\t\tspan.appendChild(document.createTextNode(code[0]));\r\n\t\tspan.className = code[1];\r\n\t\tif (span.className === 'line') {\r\n\t\t\tol.appendChild(li);\r\n\t\t\tli = document.createElement('li');\r\n\t\t\tcount++;\r\n\t\t} else {\r\n\t\t\tli.appendChild(span);\r\n\t\t}\r\n\t}\r\n\tol.style.paddingLeft = String(count).length / 2 + 1.3 + 'em';\r\n\tol.appendChild(li);\r\n\treturn ol;\r\n}\r\n\r\nexport function createHtml(codes) {\r\n\tconst ol = document.createElement(\"ol\")\r\n\tlet li = document.createElement(\"li\")\r\n\tlet count = 0\r\n\tfor (let x = 0, len = codes.length; x < len; x++) {\r\n\t\tconst code = codes[x]\r\n\t\tconst span = document.createElement(\"span\")\r\n\t\tspan.appendChild(document.createTextNode(code[0]))\r\n\t\tspan.className = code[1]\r\n\t\tif (span.className === \"line\") {\r\n\t\t\tol.appendChild(li)\r\n\t\t\tli = document.createElement(\"li\")\r\n\t\t\tcount++\r\n\t\t} else {\r\n\t\t\tli.appendChild(span)\r\n\t\t}\r\n\t}\r\n\tol.style.paddingLeft = String(count).length / 2 + 1.3 + \"em\"\r\n\tol.appendChild(li)\r\n\treturn ol\r\n}\r\n","// src/index.js\r\nimport { analysisForString, analysisForElement, analysisForTagName } from './analysis.js';\r\nimport './code.css'\r\n// import { createElement, createHtml } from './utils/domUtils.js';\r\nfunction code(element, indent) {\r\n  if (!element) {\r\n    return [\r\n      ...analysisForTagName('code'),\r\n      // ...analysisForTagName('pre'),\r\n      ...analysisForTagName('script'),\r\n      ...analysisForTagName('xmp')\r\n    ];\r\n  } else {\r\n    if (element) {\r\n      if (element instanceof HTMLElement) {\r\n        if (element.tagName === 'CODE' || element.tagName === 'PRE' || element.tagName === 'SCRIPT' || element.tagName === 'XMP') {\r\n          return analysisForElement(element);\r\n        }\r\n      }\r\n      return analysisForString(element + '', indent);\r\n    } else {\r\n      return null;\r\n    }\r\n\r\n  }\r\n}\r\n\r\nif (document.currentScript.hasAttribute('auto')) {\r\n  setTimeout(code)\r\n}\r\n\r\nexport default code;\r\n"],"names":["line","dark","italic","white","purple","gold","red","green","yellow","ryan","token","style","cache","match","i","analysis","source","inArray","value","arr","x","len","length","push","isSpace","test","isNewLine","isHex","isNumber","isPunctuation","indexOf","isLetter","isHtmlLetter","isLogistic","keywords","split","variable","parameter","normal","getHex","getNumber","getWord","getHtmlWord","tagnames","cssKeys","cssValues","handle","handleSpace","analysisForMarkupCode","handleWord","handleInnerTag","endIndex","matchTag","preSource","substring","replace","analysisForCSSCode","analysisForSourceCode","isEndTag","handlePunctuation","_i","isRegExp","handleNumberAndHex","hanldeNumber","handleFunction","analysisForString","s","indent","reg","RegExp","map","v","join","lan","ast","analysisForElement","element","codes","firstChild","nodeValue","getAttribute","setAttribute","ol","document","createElement","li","count","code","span","appendChild","createTextNode","className","paddingLeft","String","replaceChild","innerText","createHtml","innerHTML","getComputedStyle","getPropertyValue","display","analysisForTagName","tagname","elements","getElementsByTagName","k","script","src","HTMLElement","tagName","currentScript","hasAttribute","setTimeout"],"mappings":"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"}