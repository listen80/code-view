{"version":3,"file":"code.min.js","sources":["../src/index.js"],"sourcesContent":["const space = \"space\"\nconst line = \"line\"\nconst dark = \"dark\"\nconst italic = \" i\"\nconst white = \"white\"\nconst purple = \"purple\"\nconst gold = \"gold\"\nconst red = \"red\"\nconst green = \"green\"\nconst yellow = \"yellow\"\nconst ryan = \"ryan\"\n\nlet source = \"\"\nlet token, style, cache, match, i, analysis\n\nfunction inArray (value, arr) {\n  for (let x = 0, len = arr.length; x < len; x++) {\n    if (arr[x] === value) {\n      return 1\n    }\n  }\n}\n\nfunction push () {\n  analysis.push([cache, style])\n}\n\nfunction isSpace () {\n  return token && /[\\v\\t ]/.test(token)\n}\n\nfunction isNewLine () {\n  return token === \"\\n\" || token === \"\\r\"\n}\n\nfunction isHex () {\n  return token && /[0-9A-Fa-f]/.test(token)\n}\n\nfunction isNumber () {\n  return token && /[0-9]/.test(token)\n}\n\nfunction isPunctuation () {\n  return \"~`!@#$%^&*()-_+=[]{}\\\\;:'\\\"|,.<>/?\".indexOf(token) !== -1\n}\n\nfunction isLetter () {\n  return token && /[a-zA-Z_]/.test(token)\n}\n\nfunction isHtmlLetter () {\n  return isLetter() || token === \"-\"\n}\n\nfunction isLogistic () {\n  return \"$!+-=*%&|^<>\".indexOf(token) !== -1\n}\n\nconst keywords =\n  \"break,case,catch,const,continue,debugger,default,delete,do,else,extends,finally,for,if,import,in,instanceof,let,new,return,super,switch,throw,try,typeof,var,void,while,with\".split(\n    \",\",\n  )\n\nfunction isKeyword () {\n  return inArray(cache, keywords)\n}\n\nfunction isConstant () {\n  return inArray(cache, [\"null\", \"true\", \"false\", \"undefined\"])\n}\n\nconst variable = [\"var\", \"let\", \"const\"]\n\nfunction isVariable () {\n  return inArray(cache, variable)\n}\n\nconst parameter = [\"self\", \"this\", \"argument\"]\n\nfunction isParameter () {\n  return inArray(cache, parameter)\n}\n\nconst normal = [\n  \"prototype\",\n  \"module\",\n  \"window\",\n  \"document\",\n  \"history\",\n  \"location\",\n  \"screen\",\n  \"console\",\n  \"Object\",\n  \"Array\",\n  \"Number\",\n  \"Boolean\",\n  \"String\",\n  \"RegExp\",\n  \"Math\",\n]\n\nfunction isNormal () {\n  return inArray(cache, normal)\n}\n\nfunction getHex () {\n  style = purple\n  cache = token\n  while (true) {\n    token = source[++i]\n    if (isHex()) {\n      cache += token\n    } else {\n      break\n    }\n  }\n}\n\nfunction getNumber () {\n  cache = token\n  while (true) {\n    token = source[++i]\n    if (isNumber()) {\n      cache += token\n    } else if (token === \".\") {\n      cache += token\n      while (true) {\n        token = source[++i]\n        if (isNumber()) {\n          cache += token\n        } else {\n          break\n        }\n      }\n      break\n    } else {\n      break\n    }\n  }\n}\n\nfunction getWord () {\n  cache = token\n  while (true) {\n    token = source[++i]\n    if (isLetter() || isNumber()) {\n      cache += token\n    } else {\n      break\n    }\n  }\n}\n\nfunction getHtmlWord () {\n  cache = token\n  while (true) {\n    token = source[++i]\n    if (isHtmlLetter() || isNumber()) {\n      cache += token\n    } else {\n      break\n    }\n  }\n}\n\nconst tagnames =\n  \"a,abbr,address,area,article,aside,audio,b,base,bdi,bdo,big,blockquote,body,br,button,canvas,caption,center,cite,code,datalist,dd,del,details,dfn,dialog,dir,div,dl,dt,em,embed,fieldset,figcaption,figure,font,footer,form,frame,frameset,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,i,iframe,img,input,ins,kbd,keygen,label,legend,li,link,main,map,mark,nav,object,ol,optgroup,option,p,pre,progress,q,s,samp,script,section,select,small,span,strong,sub,summary,sup,table,tbody,td,textarea,tfoot,th,thead,tr,u,ul,video\".split(\n    \",\",\n  )\n\nfunction isTargetName () {\n  return inArray(cache, tagnames)\n}\n\nconst cssKeys =\n  \"align-content,align-items,align-self,alignment-baseline,all,animation,animation-delay,animation-direction,animation-duration,animation-fill-mode,animation-iteration-count,animation-name,animation-play-state,animation-timing-function,backface-visibility,background,background-attachment,background-blend-mode,background-clip,background-color,background-image,background-origin,background-position,background-position-x,background-position-y,background-repeat,background-repeat-x,background-repeat-y,background-size,baseline-shift,border,border-bottom,border-bottom-color,border-bottom-left-radius,border-bottom-right-radius,border-bottom-style,border-bottom-width,border-collapse,border-color,border-image,border-image-outset,border-image-repeat,border-image-slice,border-image-source,border-image-width,border-left,border-left-color,border-left-style,border-left-width,border-radius,border-right,border-right-color,border-right-style,border-right-width,border-spacing,border-style,border-top,border-top-color,border-top-left-radius,border-top-right-radius,border-top-style,border-top-width,border-width,bottom,box-shadow,box-sizing,break-after,break-before,break-inside,buffered-rendering,caption-side,clear,clip,clip-path,clip-rule,color,color-interpolation,color-interpolation-filters,color-rendering,column-count,column-fill,column-gap,column-rule,column-rule-color,column-rule-style,column-rule-width,column-span,column-width,columns,contain,content,counter-increment,counter-reset,cursor,cx,cy,d,direction,display,dominant-baseline,empty-cells,fill,fill-opacity,fill-rule,filter,flex,flex-basis,flex-direction,flex-flow,flex-grow,flex-shrink,flex-wrap,float,flood-color,flood-opacity,font,font-family,font-feature-settings,font-kerning,font-size,font-stretch,font-style,font-variant,font-variant-caps,font-variant-ligatures,font-variant-numeric,font-weight,height,hyphens,image-rendering,isolation,justify-content,left,letter-spacing,lighting-color,line-height,list-style,list-style-image,list-style-position,list-style-type,margin,margin-bottom,margin-left,margin-right,margin-top,marker,marker-end,marker-mid,marker-start,mask,mask-type,max-height,max-width,max-zoom,min-height,min-width,min-zoom,mix-blend-mode,motion,object-fit,object-position,offset,offset-distance,offset-path,offset-rotation,opacity,order,orientation,orphans,outline,outline-color,outline-offset,outline-style,outline-width,overflow,overflow-wrap,overflow-x,overflow-y,padding,padding-bottom,padding-left,padding-right,padding-top,page,page-break-after,page-break-before,page-break-inside,paint-order,perspective,perspective-origin,pointer-events,position,quotes,r,resize,right,rx,ry,shape-image-threshold,shape-margin,shape-outside,shape-rendering,size,speak,src,stop-color,stop-opacity,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,tab-size,table-layout,text-align,text-align-last,text-anchor,text-combine-upright,text-decoration,text-indent,text-orientation,text-overflow,text-rendering,text-shadow,text-size-adjust,text-transform,top,touch-action,transform,transform-origin,transform-style,transition,transition-delay,transition-duration,transition-property,transition-timing-function,unicode-bidi,unicode-range,user-select,user-zoom,vector-effect,vertical-align,visibility,webkit-app-region,webkit-appearance,webkit-background-clip,webkit-background-origin,webkit-border-after,webkit-border-after-color,webkit-border-after-style,webkit-border-after-width,webkit-border-before,webkit-border-before-color,webkit-border-before-style,webkit-border-before-width,webkit-border-end,webkit-border-end-color,webkit-border-end-style,webkit-border-end-width,webkit-border-horizontal-spacing,webkit-border-image,webkit-border-start,webkit-border-start-color,webkit-border-start-style,webkit-border-start-width,webkit-border-vertical-spacing,webkit-box-align,webkit-box-decoration-break,webkit-box-direction,webkit-box-flex,webkit-box-flex-group,webkit-box-lines,webkit-box-ordinal-group,webkit-box-orient,webkit-box-pack,webkit-box-reflect,webkit-column-break-after,webkit-column-break-before,webkit-column-break-inside,webkit-font-size-delta,webkit-font-smoothing,webkit-highlight,webkit-hyphenate-character,webkit-line-break,webkit-line-clamp,webkit-locale,webkit-logical-height,webkit-logical-width,webkit-margin-after,webkit-margin-after-collapse,webkit-margin-before,webkit-margin-before-collapse,webkit-margin-bottom-collapse,webkit-margin-collapse,webkit-margin-end,webkit-margin-start,webkit-margin-top-collapse,webkit-mask,webkit-mask-box-image,webkit-mask-box-image-outset,webkit-mask-box-image-repeat,webkit-mask-box-image-slice,webkit-mask-box-image-source,webkit-mask-box-image-width,webkit-mask-clip,webkit-mask-composite,webkit-mask-image,webkit-mask-origin,webkit-mask-position,webkit-mask-position-x,webkit-mask-position-y,webkit-mask-repeat,webkit-mask-repeat-x,webkit-mask-repeat-y,webkit-mask-size,webkit-max-logical-height,webkit-max-logical-width,webkit-min-logical-height,webkit-min-logical-width,webkit-padding-after,webkit-padding-before,webkit-padding-end,webkit-padding-start,webkit-perspective-origin-x,webkit-perspective-origin-y,webkit-print-color-adjust,webkit-rtl-ordering,webkit-ruby-position,webkit-tap-highlight-color,webkit-text-combine,webkit-text-decorations-in-effect,webkit-text-emphasis,webkit-text-emphasis-color,webkit-text-emphasis-position,webkit-text-emphasis-style,webkit-text-fill-color,webkit-text-orientation,webkit-text-security,webkit-text-stroke,webkit-text-stroke-color,webkit-text-stroke-width,webkit-transform-origin-x,webkit-transform-origin-y,webkit-transform-origin-z,webkit-user-drag,webkit-user-modify,webkit-writing-mode,white-space,widows,width,will-change,word-break,word-spacing,word-wrap,writing-mode,x,y,z-index,zoom\".split(\n    \",\",\n  )\n\nfunction isCssKey () {\n  return inArray(cache.replace(/^-(webkit|moz|ms|o)-/, \"\"), cssKeys)\n}\n\nconst cssValues =\n  \"red,blue,yellow,green,lime,content-box,border-box,translateX,translateY,translateZ,url,rgba,rgb,whitespace,wait,w-resize,visible,vertical-text,vertical-ideographic,uppercase,upper-roman,upper-alpha,underline,transparent,top,thin,thick,text,text-top,text-bottom,tb-rl,table-header-group,table-footer-group,sw-resize,super,strict,static,square,solid,small-caps,separate,se-resize,scroll,s-resize,rtl,row-resize,ridge,right,repeat,repeat-y,repeat-x,relative,progress,pointer,overline,outside,outset,oblique,nowrap,not-allowed,normal,none,nw-resize,no-repeat,no-drop,newspaper,ne-resize,n-resize,move,middle,medium,ltr,lr-tb,lowercase,lower-roman,lower-alpha,loose,list-item,line,line-through,line-edge,lighter,left,keep-all,justify,italic,inter-word,inter-ideograph,inside,inset,inline,inline-block,inherit,inactive,ideograph-space,ideograph-parenthesis,ideogwhitespace,wait,w-resize,visible,vertical-text,vertical-ideographic,uppercase,upper-roman,upper-alpha,underline,transparent,top,thin,thick,text,text-top,text-bottom,tb-rl,table-header-group,table-footer-group,sw-resize,super,strict,static,square,solid,small-caps,separate,se-resize,scroll,s-resize,rtl,row-resize,ridge,right,repeat,repeat-y,repeat-x,relative,progress,pointer,overline,outside,outset,oblique,nowrap,not-allowed,normal,none,nw-resize,no-repeat,no-drop,newspaper,ne-resize,n-resize,move,middle,medium,ltr,lr-tb,lowercase,lower-roman,lower-alpha,loose,list-item,line,line-through,line-edge,lighter,left,keep-all,justify,italic,inter-word,inter-ideograph,inside,inset,inline,inline-block,inherit,inactive,ideograph-space,ideograph-parenthesis,ideograph-numeric,ideograph-alpha,horizontal,hidden,help,hand,groove,fixed,ellipsis,e-resize,double,dotted,distribute,distribute-space,distribute-letter,distribute-all-lines,disc,disabled,default,decimal,dashed,crosshair,collapse,col-resize,circle,char,center,capitalize,break-word,break-all,bottom,both,bolder,bold,block,bidi-override,below,baseline,auto,always,all-scroll,absolute,table,table-cell-all,bottom,both,bolder,bold,block,bidi-override,below,baseline,auto,always,all-scroll,absolute,table,table-cell,table-row\".split(\n    \",\",\n  )\n\nfunction isCssValue () {\n  return inArray(cache.replace(/^-(webkit|moz|ms|o)-/, \"\"), cssValues)\n}\n\nfunction handle (style) {\n  analysis.push([token, style])\n  i++\n}\n\nfunction handleSpace () {\n  style = space\n  cache = token\n  while (true) {\n    token = source[++i]\n    if (isSpace()) {\n      cache += token\n    } else {\n      push()\n      break\n    }\n  }\n}\n\nfunction hanldeNumber () {\n  style = purple\n  cache = token\n  while (true) {\n    token = source[++i]\n    if (isNumber()) {\n      cache += token\n    } else {\n      push()\n      break\n    }\n  }\n}\n\nfunction AnalysisForCSSCode () {\n  while (true) {\n    token = source[i]\n    if (!token) {\n      break\n    } else if (token === \"/\" && source[i + 1] === \"*\") {\n      cache = \"/*\"\n      i += 2\n\n      while (true) {\n        token = source[i]\n        if (!token) {\n          cache && push()\n          break\n        } else if (token === \"*\" && source[i + 1] === \"/\") {\n          cache += \"*/\"\n          push()\n          i += 2\n          break\n        } else if (isNewLine()) {\n          style = dark\n          cache && push()\n          handle(line)\n          cache = \"\"\n        } else {\n          cache += token\n          i++\n        }\n      }\n    } else if (token === \".\" || token === \"#\") {\n      match = token\n      i++\n      token = source[i]\n      if (isHtmlLetter()) {\n        getHtmlWord()\n        style = green\n        cache = match + cache\n        push()\n      } else {\n        style = white\n        cache = match\n        push()\n      }\n    } else if (token === \"[\") {\n      handle(white)\n      while (true) {\n        token = source[i]\n        if (!token || isNewLine()) {\n          break\n        } else if (token === \"]\") {\n          handle(white)\n          break\n        } else if (isHtmlLetter()) {\n          getHtmlWord()\n          style = green\n          push()\n        } else if (isSpace()) {\n          handleSpace()\n        } else if (token === \"=\") {\n          handle(red)\n          while (true) {\n            token = source[i]\n            if (!token || isNewLine() || token === \"]\") {\n              break\n            } else if (isSpace()) {\n              handleSpace()\n            } else if (token === '\"' || token === \"'\") {\n              match = cache = token\n              style = yellow\n              i++\n              while (true) {\n                token = source[i]\n                if (!token || isNewLine()) {\n                  cache && push()\n                  break\n                } else if (token === match) {\n                  cache += token\n                  push()\n                  i++\n                  break\n                } else {\n                  cache += token\n                  i++\n                }\n              }\n            } else if (isHtmlLetter()) {\n              getHtmlWord()\n              style = yellow\n              push()\n            } else {\n              handle(white)\n            }\n          }\n        } else {\n          cache = token\n          style = white\n          push()\n          i++\n        }\n      }\n    } else if (isNewLine()) {\n      handle(line)\n    } else if (token === \":\") {\n      handle(white)\n      while (true) {\n        token = source[i]\n        if (!token) {\n          break\n        } else if (isSpace()) {\n          handleSpace()\n        } else if (isNewLine()) {\n          handle(line)\n          break\n        } else if (isNumber() || token === \".\") {\n          getNumber()\n          style = purple\n          push()\n          // hanldeNumber();\n          // px em %\n          if (token === \"%\") {\n            handle(red)\n          } else if (token === \"s\") {\n            handle(red)\n          } else if (token === \"p\" && source[i + 1] === \"x\") {\n            cache = \"px\"\n            style = red\n            push()\n            i += 2\n          } else if (token === \"e\" && source[i + 1] === \"m\") {\n            cache = \"em\"\n            style = red\n            push()\n            i += 2\n          } else if (token === \"c\" && source[i + 1] === \"m\") {\n            cache = \"cm\"\n            style = red\n            push()\n            i += 2\n          }\n        } else if (isHtmlLetter()) {\n          if (token === \"-\") {\n            token = source[i + 1]\n            if (isNumber() || token === \".\") {\n              token = \"-\"\n              handle(purple)\n              continue\n            } else {\n              token = \"-\"\n            }\n          }\n          getHtmlWord()\n          if (isCssValue()) {\n            style = ryan\n            push()\n          } else if (cache === \"important\") {\n            style = red\n            push()\n          } else {\n            style = white\n            push()\n          }\n        } else if (token === \";\") {\n          handle(white)\n          break\n        } else if (token === \"#\") {\n          cache = match = token\n          i++\n          token = source[i]\n          if (isHex()) {\n            getHex()\n            cache = match + cache\n            style = purple\n            push()\n          } else {\n            style = white\n            push()\n            i++\n          }\n        } else if (token === \"#\") {\n          cache = match = token\n          i++\n          token = source[i]\n          if (isHex()) {\n            getHex()\n            cache = match + cache\n            style = purple\n            push()\n          } else {\n            style = white\n            push()\n            i++\n          }\n        } else if (token === \"!\") {\n          handle(red)\n        } else {\n          // ( ) ,\n          handle(white)\n        }\n      }\n    } else if (isSpace()) {\n      handleSpace()\n    } else if (isHtmlLetter()) {\n      getHtmlWord()\n      if (isTargetName()) {\n        style = red\n        push()\n      } else if (isCssKey()) {\n        style = ryan + italic\n        push()\n      } else {\n        style = white\n        push()\n      }\n    } else if (token === \"*\") {\n      handle(red)\n    } else if (token === \"-\") {\n      handle(purple)\n    } else if (token === \"@\") {\n      cache = token\n      style = red\n      i++\n      while (true) {\n        token = source[i]\n        if (!token || isNewLine()) {\n          cache && push()\n          break\n        } else if (token === \"{\") {\n          push()\n          break\n        } else {\n          cache += token\n          i++\n        }\n      }\n    } else {\n      handle(white)\n    }\n  }\n\n  return analysis\n}\n\nfunction AnalysisForMarkupCode () {\n  function handleWord () {\n    // tag attribute (name) = value\n    style = green\n    cache = token\n    while ((token = source[++i])) {\n      if (isHtmlLetter() || isNumber()) {\n        cache += token\n      } else {\n        push()\n        break\n      }\n    }\n\n    while (true) {\n      token = source[i]\n      if (isNewLine()) {\n        handle(line)\n      } else if (isSpace()) {\n        handleSpace()\n      } else {\n        break\n      }\n    }\n\n    if (token === \"=\") {\n      cache = token\n      // tag attribute name (=) value\n      style = white\n      i++\n      push()\n\n      if (isSpace()) {\n        handleSpace()\n      }\n      token = source[i]\n      if (token === '\"' || token === \"'\") {\n        // attribute value\n        style = yellow\n        match = cache = token\n        while ((token = source[++i])) {\n          if (token === match) {\n            cache += token\n            push()\n            i++\n            break\n          } else if (isNewLine()) {\n            push()\n            style = line\n            cache = token\n            i++\n            push()\n          } else {\n            cache += token\n          }\n        }\n      } else {\n        if (!(!token || isNewLine() || token === \">\")) {\n          style = yellow\n          cache = token\n          while (true) {\n            token = source[++i]\n            if (!token || isNewLine() || token === \">\" || token === \" \") {\n              push()\n              break\n            } else {\n              cache += token\n            }\n          }\n        }\n      }\n    }\n  }\n\n  function handleInnerTag () {\n    const endIndex = source.indexOf(\"</\" + matchTag + \">\", i)\n    if (endIndex !== -1 && endIndex > i) {\n      const preSource = source\n      source = source.substring(i, endIndex)\n      i = 0\n      if (matchTag === \"style\") {\n        AnalysisForCSSCode()\n      } else {\n        AnalysisForSourceCode()\n      }\n      source = preSource\n      i = endIndex\n    }\n  }\n\n  let matchTag = \"\"\n  let isEndTag = 0\n  while (true) {\n    token = source[i]\n    if (!token) {\n      break\n    } else if (token === \"<\") {\n      if (source[i + 1] === \"!\") {\n        if (source[i + 2] === \"-\" && source[i + 3] === \"-\") {\n          cache = \"<!--\"\n          style = dark\n          i += 4\n          while (true) {\n            token = source[i]\n            if (!token) {\n              cache && push()\n            } else if (\n              token === \"-\" &&\n              source[i + 1] === \"-\" &&\n              source[i + 2] === \">\"\n            ) {\n              cache += \"-->\"\n              push()\n              i += 3\n              break\n            } else if (isNewLine()) {\n              cache && push()\n              handle(line)\n              cache = \"\"\n            } else {\n              cache += token\n              i++\n            }\n          }\n          continue\n        }\n      }\n\n      handle(white)\n      token = source[i]\n\n      if (token === \"!\" || token === \"?\") {\n        handle(white)\n      } else if (token === \"/\") {\n        handle(white)\n        isEndTag = 1\n      } else {\n        isEndTag = 0\n      }\n\n      token = source[i]\n      if (isHtmlLetter()) {\n        // tag name\n        getHtmlWord()\n        if (isEndTag) {\n          matchTag = \"\"\n        } else {\n          matchTag = cache\n        }\n        style = red\n        push()\n        while ((token = source[i])) {\n          if (token === \">\") {\n            // tag end\n            handle(white)\n            if (matchTag === \"script\" || matchTag === \"style\") {\n              handleInnerTag()\n            }\n            break\n          } else if (isSpace()) {\n            handleSpace()\n          } else if (token === '\"' || token === \"'\") {\n            // attribute value\n            style = yellow\n            cache = match = token\n            while ((token = source[++i])) {\n              if (token === match) {\n                cache += token\n                i++\n                push()\n                break\n              } else {\n                cache += token\n              }\n            }\n          } else if (isHtmlLetter() || isNumber()) {\n            // tag inner word\n            handleWord()\n          } else if (isPunctuation()) {\n            // for\n            handle(white)\n          } else if (isNewLine()) {\n            handle(line)\n          } else {\n            handle(\"fail\")\n          }\n        }\n      }\n    } else if (isNewLine()) {\n      handle(line)\n    } else if (isSpace()) {\n      handleSpace()\n    } else {\n      // inner html\n      style = white\n      cache = token\n      while (true) {\n        token = source[++i]\n        if (!token || isNewLine() || token === \"<\") {\n          push()\n          break\n        } else {\n          cache += token\n        }\n      }\n    }\n  }\n  return analysis\n}\n\nfunction AnalysisForSourceCode () {\n  function isRegExp () {\n    let _i\n    if (token === \"/\") {\n      _i = i\n      while (true) {\n        token = source[--_i]\n        if (isSpace()) {\n          continue\n        } else if (\n          token === \"=\" ||\n          token === \":\" ||\n          token === \"(\" ||\n          token === \"|\" ||\n          token === \"?\" ||\n          isNewLine() ||\n          !token\n        ) {\n          _i = i\n          while ((token = source[++_i])) {\n            if (isNewLine() || !token) {\n              break\n            } else if (token === \"\\\\\") {\n              _i++\n              continue\n            } else if (token === \"/\") {\n              return 1\n            } else {\n              continue\n            }\n          }\n          break\n        } else {\n          break\n        }\n      }\n    }\n  }\n\n  function handlePunctuation () {\n    if (token === \"/\" && source[i + 1] === \"*\") {\n      cache = \"/*\"\n      i += 2\n\n      while (true) {\n        token = source[i]\n        if (!token) {\n          cache && push()\n          break\n        } else if (token === \"*\" && source[i + 1] === \"/\") {\n          cache += \"*/\"\n          push()\n          i += 2\n          break\n        } else if (isNewLine()) {\n          style = dark\n          cache && push()\n          handle(line)\n          cache = \"\"\n        } else {\n          cache += token\n          i++\n        }\n      }\n    } else if (token === \"/\" && source[i + 1] === \"/\") {\n      (cache = \"//\")\n      i++\n      style = dark\n      while (true) {\n        token = source[++i]\n        if (!token) {\n          push()\n          break\n        } else if (isNewLine()) {\n          push()\n          cache = token\n          style = line\n          push()\n          break\n        } else {\n          cache += token\n        }\n      }\n      i++\n    } else if (token === \"'\" || token === '\"') {\n      match = cache = token\n      while (true) {\n        token = source[++i]\n        if (!token || isNewLine()) {\n          cache && push()\n          break\n        } else if (token === \"\\\\\") {\n          style = yellow\n          push()\n          cache = token + source[++i]\n          style = purple\n          push()\n          cache = \"\"\n        } else if (token === match) {\n          cache += token\n          style = yellow\n          push()\n          break\n        } else {\n          cache += token\n        }\n      }\n      i++\n    } else if (token === \"/\" || isLogistic()) {\n      match = isRegExp()\n      if (match === 1) {\n        cache = \"/\"\n        style = \"yellow hehe\"\n        push()\n        i++\n        while (true) {\n          token = source[i]\n          if (!token || isNewLine()) {\n            cache && push()\n          } else if (token === \"\\\\\") {\n            style = purple\n            cache = token + source[++i]\n            push()\n            i++\n          } else if (token === \"/\") {\n            style = yellow\n            cache = token\n            push()\n            i++\n            cache = \"\"\n            while ((token = source[i])) {\n              if (~\"gi\".indexOf(token)) {\n                style = red\n                cache += token\n                i++\n              } else {\n                break\n              }\n            }\n            cache && push()\n            break\n          } else if (isLogistic()) {\n            handle(red)\n          } else if (isLetter()) {\n            style = yellow\n            getWord()\n            push()\n            cache = \"\"\n          } else {\n            handle(yellow)\n          }\n        }\n      } else {\n        // logic\n        style = red\n        cache = source[i]\n        while ((token = source[++i])) {\n          if (isLogistic()) {\n            cache += token\n          } else {\n            push()\n            break\n          }\n        }\n      }\n    } else {\n      handle(white)\n    }\n  }\n\n  function handleNumberAndHex () {\n    style = purple\n    cache = token\n    if (token === \"0\" && (source[i + 1] === \"x\" || source[i + 1] === \"X\")) {\n      // oxabc十六进制\n      cache += source[++i]\n      while (true) {\n        token = source[++i]\n        if (isHex()) {\n          cache += token\n        } else {\n          push()\n          break\n        }\n      }\n    } else {\n      hanldeNumber()\n    }\n  }\n\n  function handleFunction () {\n    let len = analysis.length - 1\n    if (len > -1) {\n      token = analysis[len][0][0]\n      if (isSpace()) {\n        len--\n        token = analysis[len][0][0]\n      }\n      if (token === \":\" || token === \"=\") {\n        len--\n        token = analysis[len][0][0]\n        if (isSpace()) {\n          len--\n          token = analysis[len][0][0]\n        }\n        if (isLetter()) {\n          analysis[len][1] = \"green\"\n        }\n      }\n    }\n    token = source[i]\n    cache = \"function\"\n    style = ryan + italic\n    push()\n  }\n\n  while (true) {\n    token = source[i]\n    if (!token) {\n      break\n    } else if (isSpace()) {\n      handleSpace()\n    } else if (isNewLine()) {\n      handle(line)\n    } else if (isNumber()) {\n      handleNumberAndHex()\n    } else if (isLetter()) {\n      getWord()\n      if (cache === \"function\") {\n        handleFunction()\n        if (isSpace()) {\n          handleSpace()\n        }\n        if (isLetter()) {\n          getWord()\n          style = green\n          push()\n          if (isSpace()) {\n            handleSpace()\n          }\n        }\n        if (token === \"(\") {\n          handle(white)\n          while (true) {\n            token = source[i]\n            if (isSpace()) {\n              handleSpace()\n            } else if (token === \",\") {\n              handle(white)\n            } else if (isLetter()) {\n              getWord()\n              style = gold + italic\n              push()\n            } else {\n              break\n            }\n          }\n        }\n      } else {\n        if (isVariable()) {\n          style = ryan + italic\n        } else if (isKeyword()) {\n          style = red\n        } else if (isParameter()) {\n          style = gold + italic\n        } else if (isNormal()) {\n          style = ryan\n        } else if (isConstant()) {\n          style = purple\n        } else {\n          style = white\n\n          if (token === \"(\") {\n            style = ryan\n          } else if (isSpace()) {\n            while (true) {\n              token = source[i + 1]\n              if (isSpace()) {\n                handleSpace()\n              } else if (token === \"(\") {\n                style = ryan\n                break\n              } else {\n                break\n              }\n            }\n          }\n        }\n        push()\n      }\n    } else if (isPunctuation()) {\n      handlePunctuation()\n    } else {\n      handle(\"fail\")\n    }\n  }\n  return analysis\n}\n\nfunction AnalysisFor (s, indent) {\n  source = s\n  if (indent) {\n    const reg = new RegExp(\"^\\\\s{\" + indent + \"}\")\n    source = source\n      .split(/\\n|\\r|(?:\\r\\n)/)\n      .map(function (v) {\n        return v.replace(reg, \"\")\n      })\n      .join(\"\\n\")\n  }\n  i = 0\n  analysis = []\n  return /^\\s*</.test(source)\n    ? AnalysisForMarkupCode()\n    : AnalysisForSourceCode()\n}\n\nfunction AnalysisForElement (script) {\n  if (!script.coded) {\n    script.coded = true\n    const firstChild = script.firstChild\n    if (firstChild) {\n      const codes = AnalysisFor(\n        firstChild.nodeValue.replace(/^\\s+|\\s+$/g, \"\"),\n        script.getAttribute(\"code\"),\n      )\n      const ol = createElement(codes)\n      script.replaceChild(ol, firstChild)\n      script.style.display = \"block\"\n    }\n  }\n}\n\nfunction createElement (codes) {\n  const ol = document.createElement(\"ol\")\n  let li = document.createElement(\"li\")\n  let count = 0\n  for (let x = 0, len = codes.length; x < len; x++) {\n    const code = codes[x]\n    const span = document.createElement(\"span\")\n    span.appendChild(document.createTextNode(code[0]))\n    span.className = code[1]\n    if (span.className === \"line\") {\n      ol.appendChild(li)\n      li = document.createElement(\"li\")\n      count++\n    } else {\n      li.appendChild(span)\n    }\n  }\n  ol.style.paddingLeft = String(count).length / 2 + 1.3 + \"em\"\n  ol.appendChild(li)\n  return ol\n}\n\nfunction AnalysisForTagName (tagname) {\n  const scripts = document.getElementsByTagName(tagname)\n  for (let k = 0, len = scripts.length; k < len; k++) {\n    const script = scripts[k]\n    script.hasAttribute(\"code\") && AnalysisForElement(script)\n  }\n}\n\nfunction code (element, indent) {\n  if (!element) {\n    AnalysisForTagName(\"xmp\")\n    AnalysisForTagName(\"script\")\n    AnalysisForTagName(\"pre\")\n  } else {\n    if (element instanceof Node) {\n      element.setAttribute(\"code\", \"\")\n      AnalysisForElement(element)\n    } else {\n      return AnalysisFor(element.toString(), indent)\n    }\n  }\n}\n\ncode.createElement = createElement\n\nmodule.exports = code\nconsole.log(code)\n"],"names":["line","dark","white","purple","red","green","yellow","ryan","token","style","cache","match","i","analysis","source","inArray","value","arr","x","len","length","push","isSpace","test","isNewLine","isHex","isNumber","isPunctuation","indexOf","isLetter","isHtmlLetter","isLogistic","keywords","split","variable","parameter","normal","getHex","getNumber","getWord","getHtmlWord","tagnames","cssKeys","cssValues","handle","handleSpace","AnalysisForMarkupCode","handleWord","handleInnerTag","endIndex","matchTag","preSource","substring","replace","AnalysisForCSSCode","AnalysisForSourceCode","isEndTag","handlePunctuation","_i","isRegExp","handleNumberAndHex","hanldeNumber","handleFunction","gold","AnalysisFor","s","indent","reg","RegExp","map","v","join","AnalysisForElement","script","coded","firstChild","ol","createElement","nodeValue","getAttribute","replaceChild","display","codes","document","li","count","code","span","appendChild","createTextNode","className","paddingLeft","String","AnalysisForTagName","tagname","scripts","getElementsByTagName","k","hasAttribute","element","Node","toString","setAttribute","src","console","log"],"mappings":"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"}